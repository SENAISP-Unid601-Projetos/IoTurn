
/* !!! This is code generated by Prisma. Do not edit directly. !!!
/* eslint-disable */

Object.defineProperty(exports, "__esModule", { value: true });

const {
  Decimal,
  objectEnumValues,
  makeStrictEnum,
  Public,
  getRuntime,
  skip
} = require('@prisma/client/runtime/index-browser.js')


const Prisma = {}

exports.Prisma = Prisma
exports.$Enums = {}

/**
 * Prisma Client JS version: 6.18.0
 * Query Engine version: 34b5a692b7bd79939a9a2c3ef97d816e749cda2f
 */
Prisma.prismaVersion = {
  client: "6.18.0",
  engine: "34b5a692b7bd79939a9a2c3ef97d816e749cda2f"
}

Prisma.PrismaClientKnownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientKnownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)};
Prisma.PrismaClientUnknownRequestError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientUnknownRequestError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientRustPanicError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientRustPanicError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientInitializationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientInitializationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.PrismaClientValidationError = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`PrismaClientValidationError is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.Decimal = Decimal

/**
 * Re-export of sql-template-tag
 */
Prisma.sql = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`sqltag is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.empty = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`empty is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.join = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`join is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.raw = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`raw is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.validator = Public.validator

/**
* Extensions
*/
Prisma.getExtensionContext = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.getExtensionContext is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}
Prisma.defineExtension = () => {
  const runtimeName = getRuntime().prettyName;
  throw new Error(`Extensions.defineExtension is unable to run in this browser environment, or has been bundled for the browser (running in ${runtimeName}).
In case this error is unexpected for you, please report it in https://pris.ly/prisma-prisma-bug-report`,
)}

/**
 * Shorthand utilities for JSON filtering
 */
Prisma.DbNull = objectEnumValues.instances.DbNull
Prisma.JsonNull = objectEnumValues.instances.JsonNull
Prisma.AnyNull = objectEnumValues.instances.AnyNull

Prisma.NullTypes = {
  DbNull: objectEnumValues.classes.DbNull,
  JsonNull: objectEnumValues.classes.JsonNull,
  AnyNull: objectEnumValues.classes.AnyNull
}



/**
 * Enums
 */

exports.Prisma.TransactionIsolationLevel = makeStrictEnum({
  ReadUncommitted: 'ReadUncommitted',
  ReadCommitted: 'ReadCommitted',
  RepeatableRead: 'RepeatableRead',
  Serializable: 'Serializable'
});

exports.Prisma.InteracaoIAScalarFieldEnum = {
  id: 'id',
  perguntaUsuario: 'perguntaUsuario',
  queryMontada: 'queryMontada',
  respostaHumanizada: 'respostaHumanizada',
  feedbackUsuario: 'feedbackUsuario',
  criadoEm: 'criadoEm',
  atualizadoEm: 'atualizadoEm',
  hyperparameterArmId: 'hyperparameterArmId'
};

exports.Prisma.HyperparameterArmScalarFieldEnum = {
  id: 'id',
  modelName: 'modelName',
  version: 'version',
  temperature: 'temperature',
  topP: 'topP',
  topK: 'topK',
  maxOutputTokens: 'maxOutputTokens',
  responseMimeType: 'responseMimeType',
  successes: 'successes',
  failures: 'failures',
  createdAt: 'createdAt',
  updatedAt: 'updatedAt'
};

exports.Prisma.ClientScalarFieldEnum = {
  id: 'id',
  companyName: 'companyName',
  cnpj: 'cnpj',
  phone: 'phone',
  address: 'address',
  email: 'email',
  password: 'password',
  contractDate: 'contractDate',
  status: 'status'
};

exports.Prisma.UserScalarFieldEnum = {
  id: 'id',
  name: 'name',
  email: 'email',
  password: 'password',
  userType: 'userType',
  status: 'status',
  clientId: 'clientId',
  createdAt: 'createdAt'
};

exports.Prisma.MachineScalarFieldEnum = {
  id: 'id',
  name: 'name',
  model: 'model',
  manufacturer: 'manufacturer',
  serialNumber: 'serialNumber',
  status: 'status',
  clientId: 'clientId',
  responsibleUserId: 'responsibleUserId',
  deviceId: 'deviceId'
};

exports.Prisma.UnifiedMachineStateScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  machineId: 'machineId',
  current: 'current',
  rpm: 'rpm',
  oilTemperature: 'oilTemperature',
  oilLevel: 'oilLevel',
  clusterPredict: 'clusterPredict',
  clusterStrength: 'clusterStrength',
  currentIsMissing: 'currentIsMissing',
  rpmIsMissing: 'rpmIsMissing',
  oilTemperatureIsMissing: 'oilTemperatureIsMissing',
  oilLevelIsMissing: 'oilLevelIsMissing'
};

exports.Prisma.DeviceScalarFieldEnum = {
  id: 'id',
  nodeId: 'nodeId',
  description: 'description',
  status: 'status',
  lastHeartbeat: 'lastHeartbeat',
  gatewayId: 'gatewayId',
  clientId: 'clientId'
};

exports.Prisma.GatewayScalarFieldEnum = {
  id: 'id',
  gatewayId: 'gatewayId',
  description: 'description',
  status: 'status',
  lastHeartbeat: 'lastHeartbeat',
  clientId: 'clientId'
};

exports.Prisma.RpmReadingScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  rpm: 'rpm',
  machineId: 'machineId',
  userId: 'userId'
};

exports.Prisma.OilTemperatureReadingScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  temperature: 'temperature',
  machineId: 'machineId',
  userId: 'userId'
};

exports.Prisma.OilLevelReadingScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  level: 'level',
  machineId: 'machineId',
  userId: 'userId'
};

exports.Prisma.CurrentReadingScalarFieldEnum = {
  id: 'id',
  timestamp: 'timestamp',
  current: 'current',
  machineId: 'machineId',
  userId: 'userId'
};

exports.Prisma.SortOrder = {
  asc: 'asc',
  desc: 'desc'
};

exports.Prisma.QueryMode = {
  default: 'default',
  insensitive: 'insensitive'
};

exports.Prisma.NullsOrder = {
  first: 'first',
  last: 'last'
};
exports.Status = exports.$Enums.Status = {
  ACTIVE: 'ACTIVE',
  SUSPENDED: 'SUSPENDED',
  CANCELED: 'CANCELED'
};

exports.UserType = exports.$Enums.UserType = {
  ADMIN: 'ADMIN',
  TECHNICIAN: 'TECHNICIAN',
  VIEWER: 'VIEWER'
};

exports.DeviceStatus = exports.$Enums.DeviceStatus = {
  ONLINE: 'ONLINE',
  OFFLINE: 'OFFLINE',
  PROVISIONING: 'PROVISIONING',
  ERROR: 'ERROR',
  CANCELED: 'CANCELED'
};

exports.Prisma.ModelName = {
  InteracaoIA: 'InteracaoIA',
  HyperparameterArm: 'HyperparameterArm',
  Client: 'Client',
  User: 'User',
  Machine: 'Machine',
  UnifiedMachineState: 'UnifiedMachineState',
  Device: 'Device',
  Gateway: 'Gateway',
  RpmReading: 'RpmReading',
  OilTemperatureReading: 'OilTemperatureReading',
  OilLevelReading: 'OilLevelReading',
  CurrentReading: 'CurrentReading'
};

/**
 * This is a stub Prisma Client that will error at runtime if called.
 */
class PrismaClient {
  constructor() {
    return new Proxy(this, {
      get(target, prop) {
        let message
        const runtime = getRuntime()
        if (runtime.isEdge) {
          message = `PrismaClient is not configured to run in ${runtime.prettyName}. In order to run Prisma Client on edge runtime, either:
- Use Prisma Accelerate: https://pris.ly/d/accelerate
- Use Driver Adapters: https://pris.ly/d/driver-adapters
`;
        } else {
          message = 'PrismaClient is unable to run in this browser environment, or has been bundled for the browser (running in `' + runtime.prettyName + '`).'
        }

        message += `
If this is unexpected, please open an issue: https://pris.ly/prisma-prisma-bug-report`

        throw new Error(message)
      }
    })
  }
}

exports.PrismaClient = PrismaClient

Object.assign(exports, Prisma)
