
/**
 * Client
**/

import * as runtime from './runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model sensorData
 * 
 */
export type sensorData = $Result.DefaultSelection<Prisma.$sensorDataPayload>
/**
 * Model usuarios
 * 
 */
export type usuarios = $Result.DefaultSelection<Prisma.$usuariosPayload>
/**
 * Model InteracaoIA
 * 
 */
export type InteracaoIA = $Result.DefaultSelection<Prisma.$InteracaoIAPayload>
/**
 * Model HyperparameterArm
 * 
 */
export type HyperparameterArm = $Result.DefaultSelection<Prisma.$HyperparameterArmPayload>

/**
 * ##  Prisma Client ʲˢ
 *
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more SensorData
 * const sensorData = await prisma.sensorData.findMany()
 * ```
 *
 *
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  ClientOptions extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof ClientOptions ? ClientOptions['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<ClientOptions['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   *
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more SensorData
   * const sensorData = await prisma.sensorData.findMany()
   * ```
   *
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<ClientOptions, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): PrismaClient;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   *
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;


  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<"extends", Prisma.TypeMapCb<ClientOptions>, ExtArgs, $Utils.Call<Prisma.TypeMapCb<ClientOptions>, {
    extArgs: ExtArgs
  }>>

      /**
   * `prisma.sensorData`: Exposes CRUD operations for the **sensorData** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more SensorData
    * const sensorData = await prisma.sensorData.findMany()
    * ```
    */
  get sensorData(): Prisma.sensorDataDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.usuarios`: Exposes CRUD operations for the **usuarios** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Usuarios
    * const usuarios = await prisma.usuarios.findMany()
    * ```
    */
  get usuarios(): Prisma.usuariosDelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.interacaoIA`: Exposes CRUD operations for the **InteracaoIA** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more InteracaoIAS
    * const interacaoIAS = await prisma.interacaoIA.findMany()
    * ```
    */
  get interacaoIA(): Prisma.InteracaoIADelegate<ExtArgs, ClientOptions>;

  /**
   * `prisma.hyperparameterArm`: Exposes CRUD operations for the **HyperparameterArm** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more HyperparameterArms
    * const hyperparameterArms = await prisma.hyperparameterArm.findMany()
    * ```
    */
  get hyperparameterArm(): Prisma.HyperparameterArmDelegate<ExtArgs, ClientOptions>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql



  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 6.6.0
   * Query Engine version: f676762280b54cd07c770017ed3711ddde35f37a
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion

  /**
   * Utility Types
   */


  export import JsonObject = runtime.JsonObject
  export import JsonArray = runtime.JsonArray
  export import JsonValue = runtime.JsonValue
  export import InputJsonObject = runtime.InputJsonObject
  export import InputJsonArray = runtime.InputJsonArray
  export import InputJsonValue = runtime.InputJsonValue

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    *
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    *
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? P : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    sensorData: 'sensorData',
    usuarios: 'usuarios',
    InteracaoIA: 'InteracaoIA',
    HyperparameterArm: 'HyperparameterArm'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }

  interface TypeMapCb<ClientOptions = {}> extends $Utils.Fn<{extArgs: $Extensions.InternalArgs }, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs'], ClientOptions extends { omit: infer OmitOptions } ? OmitOptions : {}>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> = {
    globalOmitOptions: {
      omit: GlobalOmitOptions
    }
    meta: {
      modelProps: "sensorData" | "usuarios" | "interacaoIA" | "hyperparameterArm"
      txIsolationLevel: Prisma.TransactionIsolationLevel
    }
    model: {
      sensorData: {
        payload: Prisma.$sensorDataPayload<ExtArgs>
        fields: Prisma.sensorDataFieldRefs
        operations: {
          findUnique: {
            args: Prisma.sensorDataFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sensorDataPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.sensorDataFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sensorDataPayload>
          }
          findFirst: {
            args: Prisma.sensorDataFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sensorDataPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.sensorDataFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sensorDataPayload>
          }
          findMany: {
            args: Prisma.sensorDataFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sensorDataPayload>[]
          }
          create: {
            args: Prisma.sensorDataCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sensorDataPayload>
          }
          createMany: {
            args: Prisma.sensorDataCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.sensorDataCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sensorDataPayload>[]
          }
          delete: {
            args: Prisma.sensorDataDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sensorDataPayload>
          }
          update: {
            args: Prisma.sensorDataUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sensorDataPayload>
          }
          deleteMany: {
            args: Prisma.sensorDataDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.sensorDataUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.sensorDataUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sensorDataPayload>[]
          }
          upsert: {
            args: Prisma.sensorDataUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$sensorDataPayload>
          }
          aggregate: {
            args: Prisma.SensorDataAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateSensorData>
          }
          groupBy: {
            args: Prisma.sensorDataGroupByArgs<ExtArgs>
            result: $Utils.Optional<SensorDataGroupByOutputType>[]
          }
          count: {
            args: Prisma.sensorDataCountArgs<ExtArgs>
            result: $Utils.Optional<SensorDataCountAggregateOutputType> | number
          }
        }
      }
      usuarios: {
        payload: Prisma.$usuariosPayload<ExtArgs>
        fields: Prisma.usuariosFieldRefs
        operations: {
          findUnique: {
            args: Prisma.usuariosFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.usuariosFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findFirst: {
            args: Prisma.usuariosFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.usuariosFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          findMany: {
            args: Prisma.usuariosFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          create: {
            args: Prisma.usuariosCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          createMany: {
            args: Prisma.usuariosCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.usuariosCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          delete: {
            args: Prisma.usuariosDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          update: {
            args: Prisma.usuariosUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          deleteMany: {
            args: Prisma.usuariosDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.usuariosUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.usuariosUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>[]
          }
          upsert: {
            args: Prisma.usuariosUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$usuariosPayload>
          }
          aggregate: {
            args: Prisma.UsuariosAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateUsuarios>
          }
          groupBy: {
            args: Prisma.usuariosGroupByArgs<ExtArgs>
            result: $Utils.Optional<UsuariosGroupByOutputType>[]
          }
          count: {
            args: Prisma.usuariosCountArgs<ExtArgs>
            result: $Utils.Optional<UsuariosCountAggregateOutputType> | number
          }
        }
      }
      InteracaoIA: {
        payload: Prisma.$InteracaoIAPayload<ExtArgs>
        fields: Prisma.InteracaoIAFieldRefs
        operations: {
          findUnique: {
            args: Prisma.InteracaoIAFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoIAPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.InteracaoIAFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoIAPayload>
          }
          findFirst: {
            args: Prisma.InteracaoIAFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoIAPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.InteracaoIAFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoIAPayload>
          }
          findMany: {
            args: Prisma.InteracaoIAFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoIAPayload>[]
          }
          create: {
            args: Prisma.InteracaoIACreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoIAPayload>
          }
          createMany: {
            args: Prisma.InteracaoIACreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.InteracaoIACreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoIAPayload>[]
          }
          delete: {
            args: Prisma.InteracaoIADeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoIAPayload>
          }
          update: {
            args: Prisma.InteracaoIAUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoIAPayload>
          }
          deleteMany: {
            args: Prisma.InteracaoIADeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.InteracaoIAUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.InteracaoIAUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoIAPayload>[]
          }
          upsert: {
            args: Prisma.InteracaoIAUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$InteracaoIAPayload>
          }
          aggregate: {
            args: Prisma.InteracaoIAAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateInteracaoIA>
          }
          groupBy: {
            args: Prisma.InteracaoIAGroupByArgs<ExtArgs>
            result: $Utils.Optional<InteracaoIAGroupByOutputType>[]
          }
          count: {
            args: Prisma.InteracaoIACountArgs<ExtArgs>
            result: $Utils.Optional<InteracaoIACountAggregateOutputType> | number
          }
        }
      }
      HyperparameterArm: {
        payload: Prisma.$HyperparameterArmPayload<ExtArgs>
        fields: Prisma.HyperparameterArmFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HyperparameterArmFindUniqueArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HyperparameterArmPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HyperparameterArmFindUniqueOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HyperparameterArmPayload>
          }
          findFirst: {
            args: Prisma.HyperparameterArmFindFirstArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HyperparameterArmPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HyperparameterArmFindFirstOrThrowArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HyperparameterArmPayload>
          }
          findMany: {
            args: Prisma.HyperparameterArmFindManyArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HyperparameterArmPayload>[]
          }
          create: {
            args: Prisma.HyperparameterArmCreateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HyperparameterArmPayload>
          }
          createMany: {
            args: Prisma.HyperparameterArmCreateManyArgs<ExtArgs>
            result: BatchPayload
          }
          createManyAndReturn: {
            args: Prisma.HyperparameterArmCreateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HyperparameterArmPayload>[]
          }
          delete: {
            args: Prisma.HyperparameterArmDeleteArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HyperparameterArmPayload>
          }
          update: {
            args: Prisma.HyperparameterArmUpdateArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HyperparameterArmPayload>
          }
          deleteMany: {
            args: Prisma.HyperparameterArmDeleteManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateMany: {
            args: Prisma.HyperparameterArmUpdateManyArgs<ExtArgs>
            result: BatchPayload
          }
          updateManyAndReturn: {
            args: Prisma.HyperparameterArmUpdateManyAndReturnArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HyperparameterArmPayload>[]
          }
          upsert: {
            args: Prisma.HyperparameterArmUpsertArgs<ExtArgs>
            result: $Utils.PayloadToResult<Prisma.$HyperparameterArmPayload>
          }
          aggregate: {
            args: Prisma.HyperparameterArmAggregateArgs<ExtArgs>
            result: $Utils.Optional<AggregateHyperparameterArm>
          }
          groupBy: {
            args: Prisma.HyperparameterArmGroupByArgs<ExtArgs>
            result: $Utils.Optional<HyperparameterArmGroupByOutputType>[]
          }
          count: {
            args: Prisma.HyperparameterArmCountArgs<ExtArgs>
            result: $Utils.Optional<HyperparameterArmCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<"define", Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
    /**
     * Global configuration for omitting model fields by default.
     * 
     * @example
     * ```
     * const prisma = new PrismaClient({
     *   omit: {
     *     user: {
     *       password: true
     *     }
     *   }
     * })
     * ```
     */
    omit?: Prisma.GlobalOmitConfig
  }
  export type GlobalOmitConfig = {
    sensorData?: sensorDataOmit
    usuarios?: usuariosOmit
    interacaoIA?: InteracaoIAOmit
    hyperparameterArm?: HyperparameterArmOmit
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'createManyAndReturn'
    | 'update'
    | 'updateMany'
    | 'updateManyAndReturn'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type HyperparameterArmCountOutputType
   */

  export type HyperparameterArmCountOutputType = {
    interacoes: number
  }

  export type HyperparameterArmCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    interacoes?: boolean | HyperparameterArmCountOutputTypeCountInteracoesArgs
  }

  // Custom InputTypes
  /**
   * HyperparameterArmCountOutputType without action
   */
  export type HyperparameterArmCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArmCountOutputType
     */
    select?: HyperparameterArmCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * HyperparameterArmCountOutputType without action
   */
  export type HyperparameterArmCountOutputTypeCountInteracoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InteracaoIAWhereInput
  }


  /**
   * Models
   */

  /**
   * Model sensorData
   */

  export type AggregateSensorData = {
    _count: SensorDataCountAggregateOutputType | null
    _avg: SensorDataAvgAggregateOutputType | null
    _sum: SensorDataSumAggregateOutputType | null
    _min: SensorDataMinAggregateOutputType | null
    _max: SensorDataMaxAggregateOutputType | null
  }

  export type SensorDataAvgAggregateOutputType = {
    id: number | null
    temperatura: number | null
    nivel: number | null
    rpm: number | null
    corrente: number | null
  }

  export type SensorDataSumAggregateOutputType = {
    id: number | null
    temperatura: number | null
    nivel: number | null
    rpm: number | null
    corrente: number | null
  }

  export type SensorDataMinAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    temperatura: number | null
    nivel: number | null
    rpm: number | null
    corrente: number | null
  }

  export type SensorDataMaxAggregateOutputType = {
    id: number | null
    createdAt: Date | null
    temperatura: number | null
    nivel: number | null
    rpm: number | null
    corrente: number | null
  }

  export type SensorDataCountAggregateOutputType = {
    id: number
    createdAt: number
    temperatura: number
    nivel: number
    rpm: number
    corrente: number
    _all: number
  }


  export type SensorDataAvgAggregateInputType = {
    id?: true
    temperatura?: true
    nivel?: true
    rpm?: true
    corrente?: true
  }

  export type SensorDataSumAggregateInputType = {
    id?: true
    temperatura?: true
    nivel?: true
    rpm?: true
    corrente?: true
  }

  export type SensorDataMinAggregateInputType = {
    id?: true
    createdAt?: true
    temperatura?: true
    nivel?: true
    rpm?: true
    corrente?: true
  }

  export type SensorDataMaxAggregateInputType = {
    id?: true
    createdAt?: true
    temperatura?: true
    nivel?: true
    rpm?: true
    corrente?: true
  }

  export type SensorDataCountAggregateInputType = {
    id?: true
    createdAt?: true
    temperatura?: true
    nivel?: true
    rpm?: true
    corrente?: true
    _all?: true
  }

  export type SensorDataAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sensorData to aggregate.
     */
    where?: sensorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sensorData to fetch.
     */
    orderBy?: sensorDataOrderByWithRelationInput | sensorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: sensorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sensorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sensorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned sensorData
    **/
    _count?: true | SensorDataCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SensorDataAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SensorDataSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SensorDataMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SensorDataMaxAggregateInputType
  }

  export type GetSensorDataAggregateType<T extends SensorDataAggregateArgs> = {
        [P in keyof T & keyof AggregateSensorData]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSensorData[P]>
      : GetScalarType<T[P], AggregateSensorData[P]>
  }




  export type sensorDataGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: sensorDataWhereInput
    orderBy?: sensorDataOrderByWithAggregationInput | sensorDataOrderByWithAggregationInput[]
    by: SensorDataScalarFieldEnum[] | SensorDataScalarFieldEnum
    having?: sensorDataScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SensorDataCountAggregateInputType | true
    _avg?: SensorDataAvgAggregateInputType
    _sum?: SensorDataSumAggregateInputType
    _min?: SensorDataMinAggregateInputType
    _max?: SensorDataMaxAggregateInputType
  }

  export type SensorDataGroupByOutputType = {
    id: number
    createdAt: Date
    temperatura: number
    nivel: number
    rpm: number
    corrente: number
    _count: SensorDataCountAggregateOutputType | null
    _avg: SensorDataAvgAggregateOutputType | null
    _sum: SensorDataSumAggregateOutputType | null
    _min: SensorDataMinAggregateOutputType | null
    _max: SensorDataMaxAggregateOutputType | null
  }

  type GetSensorDataGroupByPayload<T extends sensorDataGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SensorDataGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SensorDataGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SensorDataGroupByOutputType[P]>
            : GetScalarType<T[P], SensorDataGroupByOutputType[P]>
        }
      >
    >


  export type sensorDataSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    temperatura?: boolean
    nivel?: boolean
    rpm?: boolean
    corrente?: boolean
  }, ExtArgs["result"]["sensorData"]>

  export type sensorDataSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    temperatura?: boolean
    nivel?: boolean
    rpm?: boolean
    corrente?: boolean
  }, ExtArgs["result"]["sensorData"]>

  export type sensorDataSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    temperatura?: boolean
    nivel?: boolean
    rpm?: boolean
    corrente?: boolean
  }, ExtArgs["result"]["sensorData"]>

  export type sensorDataSelectScalar = {
    id?: boolean
    createdAt?: boolean
    temperatura?: boolean
    nivel?: boolean
    rpm?: boolean
    corrente?: boolean
  }

  export type sensorDataOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "createdAt" | "temperatura" | "nivel" | "rpm" | "corrente", ExtArgs["result"]["sensorData"]>

  export type $sensorDataPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "sensorData"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      createdAt: Date
      temperatura: number
      nivel: number
      rpm: number
      corrente: number
    }, ExtArgs["result"]["sensorData"]>
    composites: {}
  }

  type sensorDataGetPayload<S extends boolean | null | undefined | sensorDataDefaultArgs> = $Result.GetResult<Prisma.$sensorDataPayload, S>

  type sensorDataCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<sensorDataFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: SensorDataCountAggregateInputType | true
    }

  export interface sensorDataDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['sensorData'], meta: { name: 'sensorData' } }
    /**
     * Find zero or one SensorData that matches the filter.
     * @param {sensorDataFindUniqueArgs} args - Arguments to find a SensorData
     * @example
     * // Get one SensorData
     * const sensorData = await prisma.sensorData.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends sensorDataFindUniqueArgs>(args: SelectSubset<T, sensorDataFindUniqueArgs<ExtArgs>>): Prisma__sensorDataClient<$Result.GetResult<Prisma.$sensorDataPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one SensorData that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {sensorDataFindUniqueOrThrowArgs} args - Arguments to find a SensorData
     * @example
     * // Get one SensorData
     * const sensorData = await prisma.sensorData.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends sensorDataFindUniqueOrThrowArgs>(args: SelectSubset<T, sensorDataFindUniqueOrThrowArgs<ExtArgs>>): Prisma__sensorDataClient<$Result.GetResult<Prisma.$sensorDataPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SensorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorDataFindFirstArgs} args - Arguments to find a SensorData
     * @example
     * // Get one SensorData
     * const sensorData = await prisma.sensorData.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends sensorDataFindFirstArgs>(args?: SelectSubset<T, sensorDataFindFirstArgs<ExtArgs>>): Prisma__sensorDataClient<$Result.GetResult<Prisma.$sensorDataPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first SensorData that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorDataFindFirstOrThrowArgs} args - Arguments to find a SensorData
     * @example
     * // Get one SensorData
     * const sensorData = await prisma.sensorData.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends sensorDataFindFirstOrThrowArgs>(args?: SelectSubset<T, sensorDataFindFirstOrThrowArgs<ExtArgs>>): Prisma__sensorDataClient<$Result.GetResult<Prisma.$sensorDataPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more SensorData that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorDataFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all SensorData
     * const sensorData = await prisma.sensorData.findMany()
     * 
     * // Get first 10 SensorData
     * const sensorData = await prisma.sensorData.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sensorDataWithIdOnly = await prisma.sensorData.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends sensorDataFindManyArgs>(args?: SelectSubset<T, sensorDataFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sensorDataPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a SensorData.
     * @param {sensorDataCreateArgs} args - Arguments to create a SensorData.
     * @example
     * // Create one SensorData
     * const SensorData = await prisma.sensorData.create({
     *   data: {
     *     // ... data to create a SensorData
     *   }
     * })
     * 
     */
    create<T extends sensorDataCreateArgs>(args: SelectSubset<T, sensorDataCreateArgs<ExtArgs>>): Prisma__sensorDataClient<$Result.GetResult<Prisma.$sensorDataPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many SensorData.
     * @param {sensorDataCreateManyArgs} args - Arguments to create many SensorData.
     * @example
     * // Create many SensorData
     * const sensorData = await prisma.sensorData.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends sensorDataCreateManyArgs>(args?: SelectSubset<T, sensorDataCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many SensorData and returns the data saved in the database.
     * @param {sensorDataCreateManyAndReturnArgs} args - Arguments to create many SensorData.
     * @example
     * // Create many SensorData
     * const sensorData = await prisma.sensorData.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many SensorData and only return the `id`
     * const sensorDataWithIdOnly = await prisma.sensorData.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends sensorDataCreateManyAndReturnArgs>(args?: SelectSubset<T, sensorDataCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sensorDataPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a SensorData.
     * @param {sensorDataDeleteArgs} args - Arguments to delete one SensorData.
     * @example
     * // Delete one SensorData
     * const SensorData = await prisma.sensorData.delete({
     *   where: {
     *     // ... filter to delete one SensorData
     *   }
     * })
     * 
     */
    delete<T extends sensorDataDeleteArgs>(args: SelectSubset<T, sensorDataDeleteArgs<ExtArgs>>): Prisma__sensorDataClient<$Result.GetResult<Prisma.$sensorDataPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one SensorData.
     * @param {sensorDataUpdateArgs} args - Arguments to update one SensorData.
     * @example
     * // Update one SensorData
     * const sensorData = await prisma.sensorData.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends sensorDataUpdateArgs>(args: SelectSubset<T, sensorDataUpdateArgs<ExtArgs>>): Prisma__sensorDataClient<$Result.GetResult<Prisma.$sensorDataPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more SensorData.
     * @param {sensorDataDeleteManyArgs} args - Arguments to filter SensorData to delete.
     * @example
     * // Delete a few SensorData
     * const { count } = await prisma.sensorData.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends sensorDataDeleteManyArgs>(args?: SelectSubset<T, sensorDataDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SensorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorDataUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many SensorData
     * const sensorData = await prisma.sensorData.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends sensorDataUpdateManyArgs>(args: SelectSubset<T, sensorDataUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more SensorData and returns the data updated in the database.
     * @param {sensorDataUpdateManyAndReturnArgs} args - Arguments to update many SensorData.
     * @example
     * // Update many SensorData
     * const sensorData = await prisma.sensorData.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more SensorData and only return the `id`
     * const sensorDataWithIdOnly = await prisma.sensorData.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends sensorDataUpdateManyAndReturnArgs>(args: SelectSubset<T, sensorDataUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$sensorDataPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one SensorData.
     * @param {sensorDataUpsertArgs} args - Arguments to update or create a SensorData.
     * @example
     * // Update or create a SensorData
     * const sensorData = await prisma.sensorData.upsert({
     *   create: {
     *     // ... data to create a SensorData
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the SensorData we want to update
     *   }
     * })
     */
    upsert<T extends sensorDataUpsertArgs>(args: SelectSubset<T, sensorDataUpsertArgs<ExtArgs>>): Prisma__sensorDataClient<$Result.GetResult<Prisma.$sensorDataPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of SensorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorDataCountArgs} args - Arguments to filter SensorData to count.
     * @example
     * // Count the number of SensorData
     * const count = await prisma.sensorData.count({
     *   where: {
     *     // ... the filter for the SensorData we want to count
     *   }
     * })
    **/
    count<T extends sensorDataCountArgs>(
      args?: Subset<T, sensorDataCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SensorDataCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a SensorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SensorDataAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SensorDataAggregateArgs>(args: Subset<T, SensorDataAggregateArgs>): Prisma.PrismaPromise<GetSensorDataAggregateType<T>>

    /**
     * Group by SensorData.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {sensorDataGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends sensorDataGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: sensorDataGroupByArgs['orderBy'] }
        : { orderBy?: sensorDataGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, sensorDataGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSensorDataGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the sensorData model
   */
  readonly fields: sensorDataFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for sensorData.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__sensorDataClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the sensorData model
   */
  interface sensorDataFieldRefs {
    readonly id: FieldRef<"sensorData", 'Int'>
    readonly createdAt: FieldRef<"sensorData", 'DateTime'>
    readonly temperatura: FieldRef<"sensorData", 'Float'>
    readonly nivel: FieldRef<"sensorData", 'Float'>
    readonly rpm: FieldRef<"sensorData", 'Float'>
    readonly corrente: FieldRef<"sensorData", 'Float'>
  }
    

  // Custom InputTypes
  /**
   * sensorData findUnique
   */
  export type sensorDataFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
    /**
     * Filter, which sensorData to fetch.
     */
    where: sensorDataWhereUniqueInput
  }

  /**
   * sensorData findUniqueOrThrow
   */
  export type sensorDataFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
    /**
     * Filter, which sensorData to fetch.
     */
    where: sensorDataWhereUniqueInput
  }

  /**
   * sensorData findFirst
   */
  export type sensorDataFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
    /**
     * Filter, which sensorData to fetch.
     */
    where?: sensorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sensorData to fetch.
     */
    orderBy?: sensorDataOrderByWithRelationInput | sensorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sensorData.
     */
    cursor?: sensorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sensorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sensorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sensorData.
     */
    distinct?: SensorDataScalarFieldEnum | SensorDataScalarFieldEnum[]
  }

  /**
   * sensorData findFirstOrThrow
   */
  export type sensorDataFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
    /**
     * Filter, which sensorData to fetch.
     */
    where?: sensorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sensorData to fetch.
     */
    orderBy?: sensorDataOrderByWithRelationInput | sensorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for sensorData.
     */
    cursor?: sensorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sensorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sensorData.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of sensorData.
     */
    distinct?: SensorDataScalarFieldEnum | SensorDataScalarFieldEnum[]
  }

  /**
   * sensorData findMany
   */
  export type sensorDataFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
    /**
     * Filter, which sensorData to fetch.
     */
    where?: sensorDataWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of sensorData to fetch.
     */
    orderBy?: sensorDataOrderByWithRelationInput | sensorDataOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing sensorData.
     */
    cursor?: sensorDataWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` sensorData from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` sensorData.
     */
    skip?: number
    distinct?: SensorDataScalarFieldEnum | SensorDataScalarFieldEnum[]
  }

  /**
   * sensorData create
   */
  export type sensorDataCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
    /**
     * The data needed to create a sensorData.
     */
    data: XOR<sensorDataCreateInput, sensorDataUncheckedCreateInput>
  }

  /**
   * sensorData createMany
   */
  export type sensorDataCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many sensorData.
     */
    data: sensorDataCreateManyInput | sensorDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sensorData createManyAndReturn
   */
  export type sensorDataCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
    /**
     * The data used to create many sensorData.
     */
    data: sensorDataCreateManyInput | sensorDataCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * sensorData update
   */
  export type sensorDataUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
    /**
     * The data needed to update a sensorData.
     */
    data: XOR<sensorDataUpdateInput, sensorDataUncheckedUpdateInput>
    /**
     * Choose, which sensorData to update.
     */
    where: sensorDataWhereUniqueInput
  }

  /**
   * sensorData updateMany
   */
  export type sensorDataUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update sensorData.
     */
    data: XOR<sensorDataUpdateManyMutationInput, sensorDataUncheckedUpdateManyInput>
    /**
     * Filter which sensorData to update
     */
    where?: sensorDataWhereInput
    /**
     * Limit how many sensorData to update.
     */
    limit?: number
  }

  /**
   * sensorData updateManyAndReturn
   */
  export type sensorDataUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
    /**
     * The data used to update sensorData.
     */
    data: XOR<sensorDataUpdateManyMutationInput, sensorDataUncheckedUpdateManyInput>
    /**
     * Filter which sensorData to update
     */
    where?: sensorDataWhereInput
    /**
     * Limit how many sensorData to update.
     */
    limit?: number
  }

  /**
   * sensorData upsert
   */
  export type sensorDataUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
    /**
     * The filter to search for the sensorData to update in case it exists.
     */
    where: sensorDataWhereUniqueInput
    /**
     * In case the sensorData found by the `where` argument doesn't exist, create a new sensorData with this data.
     */
    create: XOR<sensorDataCreateInput, sensorDataUncheckedCreateInput>
    /**
     * In case the sensorData was found with the provided `where` argument, update it with this data.
     */
    update: XOR<sensorDataUpdateInput, sensorDataUncheckedUpdateInput>
  }

  /**
   * sensorData delete
   */
  export type sensorDataDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
    /**
     * Filter which sensorData to delete.
     */
    where: sensorDataWhereUniqueInput
  }

  /**
   * sensorData deleteMany
   */
  export type sensorDataDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which sensorData to delete
     */
    where?: sensorDataWhereInput
    /**
     * Limit how many sensorData to delete.
     */
    limit?: number
  }

  /**
   * sensorData without action
   */
  export type sensorDataDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the sensorData
     */
    select?: sensorDataSelect<ExtArgs> | null
    /**
     * Omit specific fields from the sensorData
     */
    omit?: sensorDataOmit<ExtArgs> | null
  }


  /**
   * Model usuarios
   */

  export type AggregateUsuarios = {
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  export type UsuariosAvgAggregateOutputType = {
    id: number | null
  }

  export type UsuariosSumAggregateOutputType = {
    id: number | null
  }

  export type UsuariosMinAggregateOutputType = {
    id: number | null
    usuario: string | null
    email: string | null
    senha: string | null
  }

  export type UsuariosMaxAggregateOutputType = {
    id: number | null
    usuario: string | null
    email: string | null
    senha: string | null
  }

  export type UsuariosCountAggregateOutputType = {
    id: number
    usuario: number
    email: number
    senha: number
    _all: number
  }


  export type UsuariosAvgAggregateInputType = {
    id?: true
  }

  export type UsuariosSumAggregateInputType = {
    id?: true
  }

  export type UsuariosMinAggregateInputType = {
    id?: true
    usuario?: true
    email?: true
    senha?: true
  }

  export type UsuariosMaxAggregateInputType = {
    id?: true
    usuario?: true
    email?: true
    senha?: true
  }

  export type UsuariosCountAggregateInputType = {
    id?: true
    usuario?: true
    email?: true
    senha?: true
    _all?: true
  }

  export type UsuariosAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to aggregate.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned usuarios
    **/
    _count?: true | UsuariosCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UsuariosAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UsuariosSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UsuariosMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UsuariosMaxAggregateInputType
  }

  export type GetUsuariosAggregateType<T extends UsuariosAggregateArgs> = {
        [P in keyof T & keyof AggregateUsuarios]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUsuarios[P]>
      : GetScalarType<T[P], AggregateUsuarios[P]>
  }




  export type usuariosGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: usuariosWhereInput
    orderBy?: usuariosOrderByWithAggregationInput | usuariosOrderByWithAggregationInput[]
    by: UsuariosScalarFieldEnum[] | UsuariosScalarFieldEnum
    having?: usuariosScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UsuariosCountAggregateInputType | true
    _avg?: UsuariosAvgAggregateInputType
    _sum?: UsuariosSumAggregateInputType
    _min?: UsuariosMinAggregateInputType
    _max?: UsuariosMaxAggregateInputType
  }

  export type UsuariosGroupByOutputType = {
    id: number
    usuario: string
    email: string
    senha: string
    _count: UsuariosCountAggregateOutputType | null
    _avg: UsuariosAvgAggregateOutputType | null
    _sum: UsuariosSumAggregateOutputType | null
    _min: UsuariosMinAggregateOutputType | null
    _max: UsuariosMaxAggregateOutputType | null
  }

  type GetUsuariosGroupByPayload<T extends usuariosGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UsuariosGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UsuariosGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
            : GetScalarType<T[P], UsuariosGroupByOutputType[P]>
        }
      >
    >


  export type usuariosSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario?: boolean
    email?: boolean
    senha?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario?: boolean
    email?: boolean
    senha?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    usuario?: boolean
    email?: boolean
    senha?: boolean
  }, ExtArgs["result"]["usuarios"]>

  export type usuariosSelectScalar = {
    id?: boolean
    usuario?: boolean
    email?: boolean
    senha?: boolean
  }

  export type usuariosOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "usuario" | "email" | "senha", ExtArgs["result"]["usuarios"]>

  export type $usuariosPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "usuarios"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: number
      usuario: string
      email: string
      senha: string
    }, ExtArgs["result"]["usuarios"]>
    composites: {}
  }

  type usuariosGetPayload<S extends boolean | null | undefined | usuariosDefaultArgs> = $Result.GetResult<Prisma.$usuariosPayload, S>

  type usuariosCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<usuariosFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: UsuariosCountAggregateInputType | true
    }

  export interface usuariosDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['usuarios'], meta: { name: 'usuarios' } }
    /**
     * Find zero or one Usuarios that matches the filter.
     * @param {usuariosFindUniqueArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends usuariosFindUniqueArgs>(args: SelectSubset<T, usuariosFindUniqueArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one Usuarios that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {usuariosFindUniqueOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends usuariosFindUniqueOrThrowArgs>(args: SelectSubset<T, usuariosFindUniqueOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends usuariosFindFirstArgs>(args?: SelectSubset<T, usuariosFindFirstArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first Usuarios that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindFirstOrThrowArgs} args - Arguments to find a Usuarios
     * @example
     * // Get one Usuarios
     * const usuarios = await prisma.usuarios.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends usuariosFindFirstOrThrowArgs>(args?: SelectSubset<T, usuariosFindFirstOrThrowArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more Usuarios that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Usuarios
     * const usuarios = await prisma.usuarios.findMany()
     * 
     * // Get first 10 Usuarios
     * const usuarios = await prisma.usuarios.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends usuariosFindManyArgs>(args?: SelectSubset<T, usuariosFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a Usuarios.
     * @param {usuariosCreateArgs} args - Arguments to create a Usuarios.
     * @example
     * // Create one Usuarios
     * const Usuarios = await prisma.usuarios.create({
     *   data: {
     *     // ... data to create a Usuarios
     *   }
     * })
     * 
     */
    create<T extends usuariosCreateArgs>(args: SelectSubset<T, usuariosCreateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many Usuarios.
     * @param {usuariosCreateManyArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends usuariosCreateManyArgs>(args?: SelectSubset<T, usuariosCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many Usuarios and returns the data saved in the database.
     * @param {usuariosCreateManyAndReturnArgs} args - Arguments to create many Usuarios.
     * @example
     * // Create many Usuarios
     * const usuarios = await prisma.usuarios.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many Usuarios and only return the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends usuariosCreateManyAndReturnArgs>(args?: SelectSubset<T, usuariosCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a Usuarios.
     * @param {usuariosDeleteArgs} args - Arguments to delete one Usuarios.
     * @example
     * // Delete one Usuarios
     * const Usuarios = await prisma.usuarios.delete({
     *   where: {
     *     // ... filter to delete one Usuarios
     *   }
     * })
     * 
     */
    delete<T extends usuariosDeleteArgs>(args: SelectSubset<T, usuariosDeleteArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one Usuarios.
     * @param {usuariosUpdateArgs} args - Arguments to update one Usuarios.
     * @example
     * // Update one Usuarios
     * const usuarios = await prisma.usuarios.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends usuariosUpdateArgs>(args: SelectSubset<T, usuariosUpdateArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more Usuarios.
     * @param {usuariosDeleteManyArgs} args - Arguments to filter Usuarios to delete.
     * @example
     * // Delete a few Usuarios
     * const { count } = await prisma.usuarios.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends usuariosDeleteManyArgs>(args?: SelectSubset<T, usuariosDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends usuariosUpdateManyArgs>(args: SelectSubset<T, usuariosUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Usuarios and returns the data updated in the database.
     * @param {usuariosUpdateManyAndReturnArgs} args - Arguments to update many Usuarios.
     * @example
     * // Update many Usuarios
     * const usuarios = await prisma.usuarios.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more Usuarios and only return the `id`
     * const usuariosWithIdOnly = await prisma.usuarios.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends usuariosUpdateManyAndReturnArgs>(args: SelectSubset<T, usuariosUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one Usuarios.
     * @param {usuariosUpsertArgs} args - Arguments to update or create a Usuarios.
     * @example
     * // Update or create a Usuarios
     * const usuarios = await prisma.usuarios.upsert({
     *   create: {
     *     // ... data to create a Usuarios
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Usuarios we want to update
     *   }
     * })
     */
    upsert<T extends usuariosUpsertArgs>(args: SelectSubset<T, usuariosUpsertArgs<ExtArgs>>): Prisma__usuariosClient<$Result.GetResult<Prisma.$usuariosPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosCountArgs} args - Arguments to filter Usuarios to count.
     * @example
     * // Count the number of Usuarios
     * const count = await prisma.usuarios.count({
     *   where: {
     *     // ... the filter for the Usuarios we want to count
     *   }
     * })
    **/
    count<T extends usuariosCountArgs>(
      args?: Subset<T, usuariosCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UsuariosCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UsuariosAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UsuariosAggregateArgs>(args: Subset<T, UsuariosAggregateArgs>): Prisma.PrismaPromise<GetUsuariosAggregateType<T>>

    /**
     * Group by Usuarios.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {usuariosGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends usuariosGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: usuariosGroupByArgs['orderBy'] }
        : { orderBy?: usuariosGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, usuariosGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUsuariosGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the usuarios model
   */
  readonly fields: usuariosFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for usuarios.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__usuariosClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the usuarios model
   */
  interface usuariosFieldRefs {
    readonly id: FieldRef<"usuarios", 'Int'>
    readonly usuario: FieldRef<"usuarios", 'String'>
    readonly email: FieldRef<"usuarios", 'String'>
    readonly senha: FieldRef<"usuarios", 'String'>
  }
    

  // Custom InputTypes
  /**
   * usuarios findUnique
   */
  export type usuariosFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findUniqueOrThrow
   */
  export type usuariosFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios findFirst
   */
  export type usuariosFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findFirstOrThrow
   */
  export type usuariosFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of usuarios.
     */
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios findMany
   */
  export type usuariosFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter, which usuarios to fetch.
     */
    where?: usuariosWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of usuarios to fetch.
     */
    orderBy?: usuariosOrderByWithRelationInput | usuariosOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing usuarios.
     */
    cursor?: usuariosWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` usuarios from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` usuarios.
     */
    skip?: number
    distinct?: UsuariosScalarFieldEnum | UsuariosScalarFieldEnum[]
  }

  /**
   * usuarios create
   */
  export type usuariosCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data needed to create a usuarios.
     */
    data: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
  }

  /**
   * usuarios createMany
   */
  export type usuariosCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuarios createManyAndReturn
   */
  export type usuariosCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data used to create many usuarios.
     */
    data: usuariosCreateManyInput | usuariosCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * usuarios update
   */
  export type usuariosUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data needed to update a usuarios.
     */
    data: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
    /**
     * Choose, which usuarios to update.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios updateMany
   */
  export type usuariosUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
    /**
     * Limit how many usuarios to update.
     */
    limit?: number
  }

  /**
   * usuarios updateManyAndReturn
   */
  export type usuariosUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The data used to update usuarios.
     */
    data: XOR<usuariosUpdateManyMutationInput, usuariosUncheckedUpdateManyInput>
    /**
     * Filter which usuarios to update
     */
    where?: usuariosWhereInput
    /**
     * Limit how many usuarios to update.
     */
    limit?: number
  }

  /**
   * usuarios upsert
   */
  export type usuariosUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * The filter to search for the usuarios to update in case it exists.
     */
    where: usuariosWhereUniqueInput
    /**
     * In case the usuarios found by the `where` argument doesn't exist, create a new usuarios with this data.
     */
    create: XOR<usuariosCreateInput, usuariosUncheckedCreateInput>
    /**
     * In case the usuarios was found with the provided `where` argument, update it with this data.
     */
    update: XOR<usuariosUpdateInput, usuariosUncheckedUpdateInput>
  }

  /**
   * usuarios delete
   */
  export type usuariosDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
    /**
     * Filter which usuarios to delete.
     */
    where: usuariosWhereUniqueInput
  }

  /**
   * usuarios deleteMany
   */
  export type usuariosDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which usuarios to delete
     */
    where?: usuariosWhereInput
    /**
     * Limit how many usuarios to delete.
     */
    limit?: number
  }

  /**
   * usuarios without action
   */
  export type usuariosDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the usuarios
     */
    select?: usuariosSelect<ExtArgs> | null
    /**
     * Omit specific fields from the usuarios
     */
    omit?: usuariosOmit<ExtArgs> | null
  }


  /**
   * Model InteracaoIA
   */

  export type AggregateInteracaoIA = {
    _count: InteracaoIACountAggregateOutputType | null
    _avg: InteracaoIAAvgAggregateOutputType | null
    _sum: InteracaoIASumAggregateOutputType | null
    _min: InteracaoIAMinAggregateOutputType | null
    _max: InteracaoIAMaxAggregateOutputType | null
  }

  export type InteracaoIAAvgAggregateOutputType = {
    id: number | null
    feedbackUsuario: number | null
  }

  export type InteracaoIASumAggregateOutputType = {
    id: number | null
    feedbackUsuario: number | null
  }

  export type InteracaoIAMinAggregateOutputType = {
    id: number | null
    perguntaUsuario: string | null
    queryMontada: string | null
    respostaHumanizada: string | null
    feedbackUsuario: number | null
    criadoEm: Date | null
    atualizadoEm: Date | null
    hyperparameterArmId: string | null
  }

  export type InteracaoIAMaxAggregateOutputType = {
    id: number | null
    perguntaUsuario: string | null
    queryMontada: string | null
    respostaHumanizada: string | null
    feedbackUsuario: number | null
    criadoEm: Date | null
    atualizadoEm: Date | null
    hyperparameterArmId: string | null
  }

  export type InteracaoIACountAggregateOutputType = {
    id: number
    perguntaUsuario: number
    queryMontada: number
    respostaHumanizada: number
    feedbackUsuario: number
    criadoEm: number
    atualizadoEm: number
    hyperparameterArmId: number
    _all: number
  }


  export type InteracaoIAAvgAggregateInputType = {
    id?: true
    feedbackUsuario?: true
  }

  export type InteracaoIASumAggregateInputType = {
    id?: true
    feedbackUsuario?: true
  }

  export type InteracaoIAMinAggregateInputType = {
    id?: true
    perguntaUsuario?: true
    queryMontada?: true
    respostaHumanizada?: true
    feedbackUsuario?: true
    criadoEm?: true
    atualizadoEm?: true
    hyperparameterArmId?: true
  }

  export type InteracaoIAMaxAggregateInputType = {
    id?: true
    perguntaUsuario?: true
    queryMontada?: true
    respostaHumanizada?: true
    feedbackUsuario?: true
    criadoEm?: true
    atualizadoEm?: true
    hyperparameterArmId?: true
  }

  export type InteracaoIACountAggregateInputType = {
    id?: true
    perguntaUsuario?: true
    queryMontada?: true
    respostaHumanizada?: true
    feedbackUsuario?: true
    criadoEm?: true
    atualizadoEm?: true
    hyperparameterArmId?: true
    _all?: true
  }

  export type InteracaoIAAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InteracaoIA to aggregate.
     */
    where?: InteracaoIAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InteracaoIAS to fetch.
     */
    orderBy?: InteracaoIAOrderByWithRelationInput | InteracaoIAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: InteracaoIAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InteracaoIAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InteracaoIAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned InteracaoIAS
    **/
    _count?: true | InteracaoIACountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: InteracaoIAAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: InteracaoIASumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: InteracaoIAMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: InteracaoIAMaxAggregateInputType
  }

  export type GetInteracaoIAAggregateType<T extends InteracaoIAAggregateArgs> = {
        [P in keyof T & keyof AggregateInteracaoIA]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateInteracaoIA[P]>
      : GetScalarType<T[P], AggregateInteracaoIA[P]>
  }




  export type InteracaoIAGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: InteracaoIAWhereInput
    orderBy?: InteracaoIAOrderByWithAggregationInput | InteracaoIAOrderByWithAggregationInput[]
    by: InteracaoIAScalarFieldEnum[] | InteracaoIAScalarFieldEnum
    having?: InteracaoIAScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: InteracaoIACountAggregateInputType | true
    _avg?: InteracaoIAAvgAggregateInputType
    _sum?: InteracaoIASumAggregateInputType
    _min?: InteracaoIAMinAggregateInputType
    _max?: InteracaoIAMaxAggregateInputType
  }

  export type InteracaoIAGroupByOutputType = {
    id: number
    perguntaUsuario: string
    queryMontada: string
    respostaHumanizada: string
    feedbackUsuario: number | null
    criadoEm: Date
    atualizadoEm: Date
    hyperparameterArmId: string
    _count: InteracaoIACountAggregateOutputType | null
    _avg: InteracaoIAAvgAggregateOutputType | null
    _sum: InteracaoIASumAggregateOutputType | null
    _min: InteracaoIAMinAggregateOutputType | null
    _max: InteracaoIAMaxAggregateOutputType | null
  }

  type GetInteracaoIAGroupByPayload<T extends InteracaoIAGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<InteracaoIAGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof InteracaoIAGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], InteracaoIAGroupByOutputType[P]>
            : GetScalarType<T[P], InteracaoIAGroupByOutputType[P]>
        }
      >
    >


  export type InteracaoIASelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    perguntaUsuario?: boolean
    queryMontada?: boolean
    respostaHumanizada?: boolean
    feedbackUsuario?: boolean
    criadoEm?: boolean
    atualizadoEm?: boolean
    hyperparameterArmId?: boolean
    hyperparameterArm?: boolean | HyperparameterArmDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interacaoIA"]>

  export type InteracaoIASelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    perguntaUsuario?: boolean
    queryMontada?: boolean
    respostaHumanizada?: boolean
    feedbackUsuario?: boolean
    criadoEm?: boolean
    atualizadoEm?: boolean
    hyperparameterArmId?: boolean
    hyperparameterArm?: boolean | HyperparameterArmDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interacaoIA"]>

  export type InteracaoIASelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    perguntaUsuario?: boolean
    queryMontada?: boolean
    respostaHumanizada?: boolean
    feedbackUsuario?: boolean
    criadoEm?: boolean
    atualizadoEm?: boolean
    hyperparameterArmId?: boolean
    hyperparameterArm?: boolean | HyperparameterArmDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["interacaoIA"]>

  export type InteracaoIASelectScalar = {
    id?: boolean
    perguntaUsuario?: boolean
    queryMontada?: boolean
    respostaHumanizada?: boolean
    feedbackUsuario?: boolean
    criadoEm?: boolean
    atualizadoEm?: boolean
    hyperparameterArmId?: boolean
  }

  export type InteracaoIAOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "perguntaUsuario" | "queryMontada" | "respostaHumanizada" | "feedbackUsuario" | "criadoEm" | "atualizadoEm" | "hyperparameterArmId", ExtArgs["result"]["interacaoIA"]>
  export type InteracaoIAInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hyperparameterArm?: boolean | HyperparameterArmDefaultArgs<ExtArgs>
  }
  export type InteracaoIAIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hyperparameterArm?: boolean | HyperparameterArmDefaultArgs<ExtArgs>
  }
  export type InteracaoIAIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    hyperparameterArm?: boolean | HyperparameterArmDefaultArgs<ExtArgs>
  }

  export type $InteracaoIAPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "InteracaoIA"
    objects: {
      hyperparameterArm: Prisma.$HyperparameterArmPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      perguntaUsuario: string
      queryMontada: string
      respostaHumanizada: string
      feedbackUsuario: number | null
      criadoEm: Date
      atualizadoEm: Date
      hyperparameterArmId: string
    }, ExtArgs["result"]["interacaoIA"]>
    composites: {}
  }

  type InteracaoIAGetPayload<S extends boolean | null | undefined | InteracaoIADefaultArgs> = $Result.GetResult<Prisma.$InteracaoIAPayload, S>

  type InteracaoIACountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<InteracaoIAFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: InteracaoIACountAggregateInputType | true
    }

  export interface InteracaoIADelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['InteracaoIA'], meta: { name: 'InteracaoIA' } }
    /**
     * Find zero or one InteracaoIA that matches the filter.
     * @param {InteracaoIAFindUniqueArgs} args - Arguments to find a InteracaoIA
     * @example
     * // Get one InteracaoIA
     * const interacaoIA = await prisma.interacaoIA.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends InteracaoIAFindUniqueArgs>(args: SelectSubset<T, InteracaoIAFindUniqueArgs<ExtArgs>>): Prisma__InteracaoIAClient<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one InteracaoIA that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {InteracaoIAFindUniqueOrThrowArgs} args - Arguments to find a InteracaoIA
     * @example
     * // Get one InteracaoIA
     * const interacaoIA = await prisma.interacaoIA.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends InteracaoIAFindUniqueOrThrowArgs>(args: SelectSubset<T, InteracaoIAFindUniqueOrThrowArgs<ExtArgs>>): Prisma__InteracaoIAClient<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InteracaoIA that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoIAFindFirstArgs} args - Arguments to find a InteracaoIA
     * @example
     * // Get one InteracaoIA
     * const interacaoIA = await prisma.interacaoIA.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends InteracaoIAFindFirstArgs>(args?: SelectSubset<T, InteracaoIAFindFirstArgs<ExtArgs>>): Prisma__InteracaoIAClient<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first InteracaoIA that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoIAFindFirstOrThrowArgs} args - Arguments to find a InteracaoIA
     * @example
     * // Get one InteracaoIA
     * const interacaoIA = await prisma.interacaoIA.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends InteracaoIAFindFirstOrThrowArgs>(args?: SelectSubset<T, InteracaoIAFindFirstOrThrowArgs<ExtArgs>>): Prisma__InteracaoIAClient<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more InteracaoIAS that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoIAFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all InteracaoIAS
     * const interacaoIAS = await prisma.interacaoIA.findMany()
     * 
     * // Get first 10 InteracaoIAS
     * const interacaoIAS = await prisma.interacaoIA.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const interacaoIAWithIdOnly = await prisma.interacaoIA.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends InteracaoIAFindManyArgs>(args?: SelectSubset<T, InteracaoIAFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a InteracaoIA.
     * @param {InteracaoIACreateArgs} args - Arguments to create a InteracaoIA.
     * @example
     * // Create one InteracaoIA
     * const InteracaoIA = await prisma.interacaoIA.create({
     *   data: {
     *     // ... data to create a InteracaoIA
     *   }
     * })
     * 
     */
    create<T extends InteracaoIACreateArgs>(args: SelectSubset<T, InteracaoIACreateArgs<ExtArgs>>): Prisma__InteracaoIAClient<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many InteracaoIAS.
     * @param {InteracaoIACreateManyArgs} args - Arguments to create many InteracaoIAS.
     * @example
     * // Create many InteracaoIAS
     * const interacaoIA = await prisma.interacaoIA.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends InteracaoIACreateManyArgs>(args?: SelectSubset<T, InteracaoIACreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many InteracaoIAS and returns the data saved in the database.
     * @param {InteracaoIACreateManyAndReturnArgs} args - Arguments to create many InteracaoIAS.
     * @example
     * // Create many InteracaoIAS
     * const interacaoIA = await prisma.interacaoIA.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many InteracaoIAS and only return the `id`
     * const interacaoIAWithIdOnly = await prisma.interacaoIA.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends InteracaoIACreateManyAndReturnArgs>(args?: SelectSubset<T, InteracaoIACreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a InteracaoIA.
     * @param {InteracaoIADeleteArgs} args - Arguments to delete one InteracaoIA.
     * @example
     * // Delete one InteracaoIA
     * const InteracaoIA = await prisma.interacaoIA.delete({
     *   where: {
     *     // ... filter to delete one InteracaoIA
     *   }
     * })
     * 
     */
    delete<T extends InteracaoIADeleteArgs>(args: SelectSubset<T, InteracaoIADeleteArgs<ExtArgs>>): Prisma__InteracaoIAClient<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one InteracaoIA.
     * @param {InteracaoIAUpdateArgs} args - Arguments to update one InteracaoIA.
     * @example
     * // Update one InteracaoIA
     * const interacaoIA = await prisma.interacaoIA.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends InteracaoIAUpdateArgs>(args: SelectSubset<T, InteracaoIAUpdateArgs<ExtArgs>>): Prisma__InteracaoIAClient<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more InteracaoIAS.
     * @param {InteracaoIADeleteManyArgs} args - Arguments to filter InteracaoIAS to delete.
     * @example
     * // Delete a few InteracaoIAS
     * const { count } = await prisma.interacaoIA.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends InteracaoIADeleteManyArgs>(args?: SelectSubset<T, InteracaoIADeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InteracaoIAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoIAUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many InteracaoIAS
     * const interacaoIA = await prisma.interacaoIA.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends InteracaoIAUpdateManyArgs>(args: SelectSubset<T, InteracaoIAUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more InteracaoIAS and returns the data updated in the database.
     * @param {InteracaoIAUpdateManyAndReturnArgs} args - Arguments to update many InteracaoIAS.
     * @example
     * // Update many InteracaoIAS
     * const interacaoIA = await prisma.interacaoIA.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more InteracaoIAS and only return the `id`
     * const interacaoIAWithIdOnly = await prisma.interacaoIA.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends InteracaoIAUpdateManyAndReturnArgs>(args: SelectSubset<T, InteracaoIAUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one InteracaoIA.
     * @param {InteracaoIAUpsertArgs} args - Arguments to update or create a InteracaoIA.
     * @example
     * // Update or create a InteracaoIA
     * const interacaoIA = await prisma.interacaoIA.upsert({
     *   create: {
     *     // ... data to create a InteracaoIA
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the InteracaoIA we want to update
     *   }
     * })
     */
    upsert<T extends InteracaoIAUpsertArgs>(args: SelectSubset<T, InteracaoIAUpsertArgs<ExtArgs>>): Prisma__InteracaoIAClient<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of InteracaoIAS.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoIACountArgs} args - Arguments to filter InteracaoIAS to count.
     * @example
     * // Count the number of InteracaoIAS
     * const count = await prisma.interacaoIA.count({
     *   where: {
     *     // ... the filter for the InteracaoIAS we want to count
     *   }
     * })
    **/
    count<T extends InteracaoIACountArgs>(
      args?: Subset<T, InteracaoIACountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], InteracaoIACountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a InteracaoIA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoIAAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends InteracaoIAAggregateArgs>(args: Subset<T, InteracaoIAAggregateArgs>): Prisma.PrismaPromise<GetInteracaoIAAggregateType<T>>

    /**
     * Group by InteracaoIA.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {InteracaoIAGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends InteracaoIAGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: InteracaoIAGroupByArgs['orderBy'] }
        : { orderBy?: InteracaoIAGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, InteracaoIAGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetInteracaoIAGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the InteracaoIA model
   */
  readonly fields: InteracaoIAFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for InteracaoIA.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__InteracaoIAClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    hyperparameterArm<T extends HyperparameterArmDefaultArgs<ExtArgs> = {}>(args?: Subset<T, HyperparameterArmDefaultArgs<ExtArgs>>): Prisma__HyperparameterArmClient<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions> | Null, Null, ExtArgs, GlobalOmitOptions>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the InteracaoIA model
   */
  interface InteracaoIAFieldRefs {
    readonly id: FieldRef<"InteracaoIA", 'Int'>
    readonly perguntaUsuario: FieldRef<"InteracaoIA", 'String'>
    readonly queryMontada: FieldRef<"InteracaoIA", 'String'>
    readonly respostaHumanizada: FieldRef<"InteracaoIA", 'String'>
    readonly feedbackUsuario: FieldRef<"InteracaoIA", 'Int'>
    readonly criadoEm: FieldRef<"InteracaoIA", 'DateTime'>
    readonly atualizadoEm: FieldRef<"InteracaoIA", 'DateTime'>
    readonly hyperparameterArmId: FieldRef<"InteracaoIA", 'String'>
  }
    

  // Custom InputTypes
  /**
   * InteracaoIA findUnique
   */
  export type InteracaoIAFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAInclude<ExtArgs> | null
    /**
     * Filter, which InteracaoIA to fetch.
     */
    where: InteracaoIAWhereUniqueInput
  }

  /**
   * InteracaoIA findUniqueOrThrow
   */
  export type InteracaoIAFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAInclude<ExtArgs> | null
    /**
     * Filter, which InteracaoIA to fetch.
     */
    where: InteracaoIAWhereUniqueInput
  }

  /**
   * InteracaoIA findFirst
   */
  export type InteracaoIAFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAInclude<ExtArgs> | null
    /**
     * Filter, which InteracaoIA to fetch.
     */
    where?: InteracaoIAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InteracaoIAS to fetch.
     */
    orderBy?: InteracaoIAOrderByWithRelationInput | InteracaoIAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InteracaoIAS.
     */
    cursor?: InteracaoIAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InteracaoIAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InteracaoIAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InteracaoIAS.
     */
    distinct?: InteracaoIAScalarFieldEnum | InteracaoIAScalarFieldEnum[]
  }

  /**
   * InteracaoIA findFirstOrThrow
   */
  export type InteracaoIAFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAInclude<ExtArgs> | null
    /**
     * Filter, which InteracaoIA to fetch.
     */
    where?: InteracaoIAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InteracaoIAS to fetch.
     */
    orderBy?: InteracaoIAOrderByWithRelationInput | InteracaoIAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for InteracaoIAS.
     */
    cursor?: InteracaoIAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InteracaoIAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InteracaoIAS.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of InteracaoIAS.
     */
    distinct?: InteracaoIAScalarFieldEnum | InteracaoIAScalarFieldEnum[]
  }

  /**
   * InteracaoIA findMany
   */
  export type InteracaoIAFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAInclude<ExtArgs> | null
    /**
     * Filter, which InteracaoIAS to fetch.
     */
    where?: InteracaoIAWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of InteracaoIAS to fetch.
     */
    orderBy?: InteracaoIAOrderByWithRelationInput | InteracaoIAOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing InteracaoIAS.
     */
    cursor?: InteracaoIAWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` InteracaoIAS from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` InteracaoIAS.
     */
    skip?: number
    distinct?: InteracaoIAScalarFieldEnum | InteracaoIAScalarFieldEnum[]
  }

  /**
   * InteracaoIA create
   */
  export type InteracaoIACreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAInclude<ExtArgs> | null
    /**
     * The data needed to create a InteracaoIA.
     */
    data: XOR<InteracaoIACreateInput, InteracaoIAUncheckedCreateInput>
  }

  /**
   * InteracaoIA createMany
   */
  export type InteracaoIACreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many InteracaoIAS.
     */
    data: InteracaoIACreateManyInput | InteracaoIACreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * InteracaoIA createManyAndReturn
   */
  export type InteracaoIACreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * The data used to create many InteracaoIAS.
     */
    data: InteracaoIACreateManyInput | InteracaoIACreateManyInput[]
    skipDuplicates?: boolean
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAIncludeCreateManyAndReturn<ExtArgs> | null
  }

  /**
   * InteracaoIA update
   */
  export type InteracaoIAUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAInclude<ExtArgs> | null
    /**
     * The data needed to update a InteracaoIA.
     */
    data: XOR<InteracaoIAUpdateInput, InteracaoIAUncheckedUpdateInput>
    /**
     * Choose, which InteracaoIA to update.
     */
    where: InteracaoIAWhereUniqueInput
  }

  /**
   * InteracaoIA updateMany
   */
  export type InteracaoIAUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update InteracaoIAS.
     */
    data: XOR<InteracaoIAUpdateManyMutationInput, InteracaoIAUncheckedUpdateManyInput>
    /**
     * Filter which InteracaoIAS to update
     */
    where?: InteracaoIAWhereInput
    /**
     * Limit how many InteracaoIAS to update.
     */
    limit?: number
  }

  /**
   * InteracaoIA updateManyAndReturn
   */
  export type InteracaoIAUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * The data used to update InteracaoIAS.
     */
    data: XOR<InteracaoIAUpdateManyMutationInput, InteracaoIAUncheckedUpdateManyInput>
    /**
     * Filter which InteracaoIAS to update
     */
    where?: InteracaoIAWhereInput
    /**
     * Limit how many InteracaoIAS to update.
     */
    limit?: number
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAIncludeUpdateManyAndReturn<ExtArgs> | null
  }

  /**
   * InteracaoIA upsert
   */
  export type InteracaoIAUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAInclude<ExtArgs> | null
    /**
     * The filter to search for the InteracaoIA to update in case it exists.
     */
    where: InteracaoIAWhereUniqueInput
    /**
     * In case the InteracaoIA found by the `where` argument doesn't exist, create a new InteracaoIA with this data.
     */
    create: XOR<InteracaoIACreateInput, InteracaoIAUncheckedCreateInput>
    /**
     * In case the InteracaoIA was found with the provided `where` argument, update it with this data.
     */
    update: XOR<InteracaoIAUpdateInput, InteracaoIAUncheckedUpdateInput>
  }

  /**
   * InteracaoIA delete
   */
  export type InteracaoIADeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAInclude<ExtArgs> | null
    /**
     * Filter which InteracaoIA to delete.
     */
    where: InteracaoIAWhereUniqueInput
  }

  /**
   * InteracaoIA deleteMany
   */
  export type InteracaoIADeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which InteracaoIAS to delete
     */
    where?: InteracaoIAWhereInput
    /**
     * Limit how many InteracaoIAS to delete.
     */
    limit?: number
  }

  /**
   * InteracaoIA without action
   */
  export type InteracaoIADefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAInclude<ExtArgs> | null
  }


  /**
   * Model HyperparameterArm
   */

  export type AggregateHyperparameterArm = {
    _count: HyperparameterArmCountAggregateOutputType | null
    _avg: HyperparameterArmAvgAggregateOutputType | null
    _sum: HyperparameterArmSumAggregateOutputType | null
    _min: HyperparameterArmMinAggregateOutputType | null
    _max: HyperparameterArmMaxAggregateOutputType | null
  }

  export type HyperparameterArmAvgAggregateOutputType = {
    temperature: number | null
    topP: number | null
    topK: number | null
    maxOutputTokens: number | null
    successes: number | null
    failures: number | null
  }

  export type HyperparameterArmSumAggregateOutputType = {
    temperature: number | null
    topP: number | null
    topK: number | null
    maxOutputTokens: number | null
    successes: number | null
    failures: number | null
  }

  export type HyperparameterArmMinAggregateOutputType = {
    id: string | null
    modelName: string | null
    version: string | null
    temperature: number | null
    topP: number | null
    topK: number | null
    maxOutputTokens: number | null
    responseMimeType: string | null
    successes: number | null
    failures: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HyperparameterArmMaxAggregateOutputType = {
    id: string | null
    modelName: string | null
    version: string | null
    temperature: number | null
    topP: number | null
    topK: number | null
    maxOutputTokens: number | null
    responseMimeType: string | null
    successes: number | null
    failures: number | null
    createdAt: Date | null
    updatedAt: Date | null
  }

  export type HyperparameterArmCountAggregateOutputType = {
    id: number
    modelName: number
    version: number
    temperature: number
    topP: number
    topK: number
    maxOutputTokens: number
    responseMimeType: number
    successes: number
    failures: number
    createdAt: number
    updatedAt: number
    _all: number
  }


  export type HyperparameterArmAvgAggregateInputType = {
    temperature?: true
    topP?: true
    topK?: true
    maxOutputTokens?: true
    successes?: true
    failures?: true
  }

  export type HyperparameterArmSumAggregateInputType = {
    temperature?: true
    topP?: true
    topK?: true
    maxOutputTokens?: true
    successes?: true
    failures?: true
  }

  export type HyperparameterArmMinAggregateInputType = {
    id?: true
    modelName?: true
    version?: true
    temperature?: true
    topP?: true
    topK?: true
    maxOutputTokens?: true
    responseMimeType?: true
    successes?: true
    failures?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HyperparameterArmMaxAggregateInputType = {
    id?: true
    modelName?: true
    version?: true
    temperature?: true
    topP?: true
    topK?: true
    maxOutputTokens?: true
    responseMimeType?: true
    successes?: true
    failures?: true
    createdAt?: true
    updatedAt?: true
  }

  export type HyperparameterArmCountAggregateInputType = {
    id?: true
    modelName?: true
    version?: true
    temperature?: true
    topP?: true
    topK?: true
    maxOutputTokens?: true
    responseMimeType?: true
    successes?: true
    failures?: true
    createdAt?: true
    updatedAt?: true
    _all?: true
  }

  export type HyperparameterArmAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HyperparameterArm to aggregate.
     */
    where?: HyperparameterArmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HyperparameterArms to fetch.
     */
    orderBy?: HyperparameterArmOrderByWithRelationInput | HyperparameterArmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HyperparameterArmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HyperparameterArms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HyperparameterArms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned HyperparameterArms
    **/
    _count?: true | HyperparameterArmCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HyperparameterArmAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HyperparameterArmSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HyperparameterArmMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HyperparameterArmMaxAggregateInputType
  }

  export type GetHyperparameterArmAggregateType<T extends HyperparameterArmAggregateArgs> = {
        [P in keyof T & keyof AggregateHyperparameterArm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHyperparameterArm[P]>
      : GetScalarType<T[P], AggregateHyperparameterArm[P]>
  }




  export type HyperparameterArmGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HyperparameterArmWhereInput
    orderBy?: HyperparameterArmOrderByWithAggregationInput | HyperparameterArmOrderByWithAggregationInput[]
    by: HyperparameterArmScalarFieldEnum[] | HyperparameterArmScalarFieldEnum
    having?: HyperparameterArmScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HyperparameterArmCountAggregateInputType | true
    _avg?: HyperparameterArmAvgAggregateInputType
    _sum?: HyperparameterArmSumAggregateInputType
    _min?: HyperparameterArmMinAggregateInputType
    _max?: HyperparameterArmMaxAggregateInputType
  }

  export type HyperparameterArmGroupByOutputType = {
    id: string
    modelName: string | null
    version: string | null
    temperature: number
    topP: number
    topK: number
    maxOutputTokens: number
    responseMimeType: string
    successes: number | null
    failures: number | null
    createdAt: Date
    updatedAt: Date
    _count: HyperparameterArmCountAggregateOutputType | null
    _avg: HyperparameterArmAvgAggregateOutputType | null
    _sum: HyperparameterArmSumAggregateOutputType | null
    _min: HyperparameterArmMinAggregateOutputType | null
    _max: HyperparameterArmMaxAggregateOutputType | null
  }

  type GetHyperparameterArmGroupByPayload<T extends HyperparameterArmGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HyperparameterArmGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HyperparameterArmGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HyperparameterArmGroupByOutputType[P]>
            : GetScalarType<T[P], HyperparameterArmGroupByOutputType[P]>
        }
      >
    >


  export type HyperparameterArmSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    modelName?: boolean
    version?: boolean
    temperature?: boolean
    topP?: boolean
    topK?: boolean
    maxOutputTokens?: boolean
    responseMimeType?: boolean
    successes?: boolean
    failures?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    interacoes?: boolean | HyperparameterArm$interacoesArgs<ExtArgs>
    _count?: boolean | HyperparameterArmCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["hyperparameterArm"]>

  export type HyperparameterArmSelectCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    modelName?: boolean
    version?: boolean
    temperature?: boolean
    topP?: boolean
    topK?: boolean
    maxOutputTokens?: boolean
    responseMimeType?: boolean
    successes?: boolean
    failures?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["hyperparameterArm"]>

  export type HyperparameterArmSelectUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    modelName?: boolean
    version?: boolean
    temperature?: boolean
    topP?: boolean
    topK?: boolean
    maxOutputTokens?: boolean
    responseMimeType?: boolean
    successes?: boolean
    failures?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }, ExtArgs["result"]["hyperparameterArm"]>

  export type HyperparameterArmSelectScalar = {
    id?: boolean
    modelName?: boolean
    version?: boolean
    temperature?: boolean
    topP?: boolean
    topK?: boolean
    maxOutputTokens?: boolean
    responseMimeType?: boolean
    successes?: boolean
    failures?: boolean
    createdAt?: boolean
    updatedAt?: boolean
  }

  export type HyperparameterArmOmit<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetOmit<"id" | "modelName" | "version" | "temperature" | "topP" | "topK" | "maxOutputTokens" | "responseMimeType" | "successes" | "failures" | "createdAt" | "updatedAt", ExtArgs["result"]["hyperparameterArm"]>
  export type HyperparameterArmInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    interacoes?: boolean | HyperparameterArm$interacoesArgs<ExtArgs>
    _count?: boolean | HyperparameterArmCountOutputTypeDefaultArgs<ExtArgs>
  }
  export type HyperparameterArmIncludeCreateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}
  export type HyperparameterArmIncludeUpdateManyAndReturn<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {}

  export type $HyperparameterArmPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "HyperparameterArm"
    objects: {
      interacoes: Prisma.$InteracaoIAPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      modelName: string | null
      version: string | null
      temperature: number
      topP: number
      topK: number
      maxOutputTokens: number
      responseMimeType: string
      successes: number | null
      failures: number | null
      createdAt: Date
      updatedAt: Date
    }, ExtArgs["result"]["hyperparameterArm"]>
    composites: {}
  }

  type HyperparameterArmGetPayload<S extends boolean | null | undefined | HyperparameterArmDefaultArgs> = $Result.GetResult<Prisma.$HyperparameterArmPayload, S>

  type HyperparameterArmCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> =
    Omit<HyperparameterArmFindManyArgs, 'select' | 'include' | 'distinct' | 'omit'> & {
      select?: HyperparameterArmCountAggregateInputType | true
    }

  export interface HyperparameterArmDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['HyperparameterArm'], meta: { name: 'HyperparameterArm' } }
    /**
     * Find zero or one HyperparameterArm that matches the filter.
     * @param {HyperparameterArmFindUniqueArgs} args - Arguments to find a HyperparameterArm
     * @example
     * // Get one HyperparameterArm
     * const hyperparameterArm = await prisma.hyperparameterArm.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUnique<T extends HyperparameterArmFindUniqueArgs>(args: SelectSubset<T, HyperparameterArmFindUniqueArgs<ExtArgs>>): Prisma__HyperparameterArmClient<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "findUnique", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find one HyperparameterArm that matches the filter or throw an error with `error.code='P2025'`
     * if no matches were found.
     * @param {HyperparameterArmFindUniqueOrThrowArgs} args - Arguments to find a HyperparameterArm
     * @example
     * // Get one HyperparameterArm
     * const hyperparameterArm = await prisma.hyperparameterArm.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findUniqueOrThrow<T extends HyperparameterArmFindUniqueOrThrowArgs>(args: SelectSubset<T, HyperparameterArmFindUniqueOrThrowArgs<ExtArgs>>): Prisma__HyperparameterArmClient<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "findUniqueOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HyperparameterArm that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HyperparameterArmFindFirstArgs} args - Arguments to find a HyperparameterArm
     * @example
     * // Get one HyperparameterArm
     * const hyperparameterArm = await prisma.hyperparameterArm.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirst<T extends HyperparameterArmFindFirstArgs>(args?: SelectSubset<T, HyperparameterArmFindFirstArgs<ExtArgs>>): Prisma__HyperparameterArmClient<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "findFirst", GlobalOmitOptions> | null, null, ExtArgs, GlobalOmitOptions>

    /**
     * Find the first HyperparameterArm that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HyperparameterArmFindFirstOrThrowArgs} args - Arguments to find a HyperparameterArm
     * @example
     * // Get one HyperparameterArm
     * const hyperparameterArm = await prisma.hyperparameterArm.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     */
    findFirstOrThrow<T extends HyperparameterArmFindFirstOrThrowArgs>(args?: SelectSubset<T, HyperparameterArmFindFirstOrThrowArgs<ExtArgs>>): Prisma__HyperparameterArmClient<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "findFirstOrThrow", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Find zero or more HyperparameterArms that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HyperparameterArmFindManyArgs} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all HyperparameterArms
     * const hyperparameterArms = await prisma.hyperparameterArm.findMany()
     * 
     * // Get first 10 HyperparameterArms
     * const hyperparameterArms = await prisma.hyperparameterArm.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const hyperparameterArmWithIdOnly = await prisma.hyperparameterArm.findMany({ select: { id: true } })
     * 
     */
    findMany<T extends HyperparameterArmFindManyArgs>(args?: SelectSubset<T, HyperparameterArmFindManyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "findMany", GlobalOmitOptions>>

    /**
     * Create a HyperparameterArm.
     * @param {HyperparameterArmCreateArgs} args - Arguments to create a HyperparameterArm.
     * @example
     * // Create one HyperparameterArm
     * const HyperparameterArm = await prisma.hyperparameterArm.create({
     *   data: {
     *     // ... data to create a HyperparameterArm
     *   }
     * })
     * 
     */
    create<T extends HyperparameterArmCreateArgs>(args: SelectSubset<T, HyperparameterArmCreateArgs<ExtArgs>>): Prisma__HyperparameterArmClient<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "create", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Create many HyperparameterArms.
     * @param {HyperparameterArmCreateManyArgs} args - Arguments to create many HyperparameterArms.
     * @example
     * // Create many HyperparameterArms
     * const hyperparameterArm = await prisma.hyperparameterArm.createMany({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     *     
     */
    createMany<T extends HyperparameterArmCreateManyArgs>(args?: SelectSubset<T, HyperparameterArmCreateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create many HyperparameterArms and returns the data saved in the database.
     * @param {HyperparameterArmCreateManyAndReturnArgs} args - Arguments to create many HyperparameterArms.
     * @example
     * // Create many HyperparameterArms
     * const hyperparameterArm = await prisma.hyperparameterArm.createManyAndReturn({
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Create many HyperparameterArms and only return the `id`
     * const hyperparameterArmWithIdOnly = await prisma.hyperparameterArm.createManyAndReturn({
     *   select: { id: true },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    createManyAndReturn<T extends HyperparameterArmCreateManyAndReturnArgs>(args?: SelectSubset<T, HyperparameterArmCreateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "createManyAndReturn", GlobalOmitOptions>>

    /**
     * Delete a HyperparameterArm.
     * @param {HyperparameterArmDeleteArgs} args - Arguments to delete one HyperparameterArm.
     * @example
     * // Delete one HyperparameterArm
     * const HyperparameterArm = await prisma.hyperparameterArm.delete({
     *   where: {
     *     // ... filter to delete one HyperparameterArm
     *   }
     * })
     * 
     */
    delete<T extends HyperparameterArmDeleteArgs>(args: SelectSubset<T, HyperparameterArmDeleteArgs<ExtArgs>>): Prisma__HyperparameterArmClient<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "delete", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Update one HyperparameterArm.
     * @param {HyperparameterArmUpdateArgs} args - Arguments to update one HyperparameterArm.
     * @example
     * // Update one HyperparameterArm
     * const hyperparameterArm = await prisma.hyperparameterArm.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    update<T extends HyperparameterArmUpdateArgs>(args: SelectSubset<T, HyperparameterArmUpdateArgs<ExtArgs>>): Prisma__HyperparameterArmClient<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "update", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>

    /**
     * Delete zero or more HyperparameterArms.
     * @param {HyperparameterArmDeleteManyArgs} args - Arguments to filter HyperparameterArms to delete.
     * @example
     * // Delete a few HyperparameterArms
     * const { count } = await prisma.hyperparameterArm.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
     */
    deleteMany<T extends HyperparameterArmDeleteManyArgs>(args?: SelectSubset<T, HyperparameterArmDeleteManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HyperparameterArms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HyperparameterArmUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many HyperparameterArms
     * const hyperparameterArm = await prisma.hyperparameterArm.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
     */
    updateMany<T extends HyperparameterArmUpdateManyArgs>(args: SelectSubset<T, HyperparameterArmUpdateManyArgs<ExtArgs>>): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more HyperparameterArms and returns the data updated in the database.
     * @param {HyperparameterArmUpdateManyAndReturnArgs} args - Arguments to update many HyperparameterArms.
     * @example
     * // Update many HyperparameterArms
     * const hyperparameterArm = await prisma.hyperparameterArm.updateManyAndReturn({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * 
     * // Update zero or more HyperparameterArms and only return the `id`
     * const hyperparameterArmWithIdOnly = await prisma.hyperparameterArm.updateManyAndReturn({
     *   select: { id: true },
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: [
     *     // ... provide data here
     *   ]
     * })
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * 
     */
    updateManyAndReturn<T extends HyperparameterArmUpdateManyAndReturnArgs>(args: SelectSubset<T, HyperparameterArmUpdateManyAndReturnArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "updateManyAndReturn", GlobalOmitOptions>>

    /**
     * Create or update one HyperparameterArm.
     * @param {HyperparameterArmUpsertArgs} args - Arguments to update or create a HyperparameterArm.
     * @example
     * // Update or create a HyperparameterArm
     * const hyperparameterArm = await prisma.hyperparameterArm.upsert({
     *   create: {
     *     // ... data to create a HyperparameterArm
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the HyperparameterArm we want to update
     *   }
     * })
     */
    upsert<T extends HyperparameterArmUpsertArgs>(args: SelectSubset<T, HyperparameterArmUpsertArgs<ExtArgs>>): Prisma__HyperparameterArmClient<$Result.GetResult<Prisma.$HyperparameterArmPayload<ExtArgs>, T, "upsert", GlobalOmitOptions>, never, ExtArgs, GlobalOmitOptions>


    /**
     * Count the number of HyperparameterArms.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HyperparameterArmCountArgs} args - Arguments to filter HyperparameterArms to count.
     * @example
     * // Count the number of HyperparameterArms
     * const count = await prisma.hyperparameterArm.count({
     *   where: {
     *     // ... the filter for the HyperparameterArms we want to count
     *   }
     * })
    **/
    count<T extends HyperparameterArmCountArgs>(
      args?: Subset<T, HyperparameterArmCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HyperparameterArmCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a HyperparameterArm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HyperparameterArmAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HyperparameterArmAggregateArgs>(args: Subset<T, HyperparameterArmAggregateArgs>): Prisma.PrismaPromise<GetHyperparameterArmAggregateType<T>>

    /**
     * Group by HyperparameterArm.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HyperparameterArmGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HyperparameterArmGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HyperparameterArmGroupByArgs['orderBy'] }
        : { orderBy?: HyperparameterArmGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HyperparameterArmGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHyperparameterArmGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the HyperparameterArm model
   */
  readonly fields: HyperparameterArmFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for HyperparameterArm.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HyperparameterArmClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs, GlobalOmitOptions = {}> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: "PrismaPromise"
    interacoes<T extends HyperparameterArm$interacoesArgs<ExtArgs> = {}>(args?: Subset<T, HyperparameterArm$interacoesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$InteracaoIAPayload<ExtArgs>, T, "findMany", GlobalOmitOptions> | Null>
    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>
  }




  /**
   * Fields of the HyperparameterArm model
   */
  interface HyperparameterArmFieldRefs {
    readonly id: FieldRef<"HyperparameterArm", 'String'>
    readonly modelName: FieldRef<"HyperparameterArm", 'String'>
    readonly version: FieldRef<"HyperparameterArm", 'String'>
    readonly temperature: FieldRef<"HyperparameterArm", 'Float'>
    readonly topP: FieldRef<"HyperparameterArm", 'Float'>
    readonly topK: FieldRef<"HyperparameterArm", 'Int'>
    readonly maxOutputTokens: FieldRef<"HyperparameterArm", 'Int'>
    readonly responseMimeType: FieldRef<"HyperparameterArm", 'String'>
    readonly successes: FieldRef<"HyperparameterArm", 'Int'>
    readonly failures: FieldRef<"HyperparameterArm", 'Int'>
    readonly createdAt: FieldRef<"HyperparameterArm", 'DateTime'>
    readonly updatedAt: FieldRef<"HyperparameterArm", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * HyperparameterArm findUnique
   */
  export type HyperparameterArmFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HyperparameterArmInclude<ExtArgs> | null
    /**
     * Filter, which HyperparameterArm to fetch.
     */
    where: HyperparameterArmWhereUniqueInput
  }

  /**
   * HyperparameterArm findUniqueOrThrow
   */
  export type HyperparameterArmFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HyperparameterArmInclude<ExtArgs> | null
    /**
     * Filter, which HyperparameterArm to fetch.
     */
    where: HyperparameterArmWhereUniqueInput
  }

  /**
   * HyperparameterArm findFirst
   */
  export type HyperparameterArmFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HyperparameterArmInclude<ExtArgs> | null
    /**
     * Filter, which HyperparameterArm to fetch.
     */
    where?: HyperparameterArmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HyperparameterArms to fetch.
     */
    orderBy?: HyperparameterArmOrderByWithRelationInput | HyperparameterArmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HyperparameterArms.
     */
    cursor?: HyperparameterArmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HyperparameterArms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HyperparameterArms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HyperparameterArms.
     */
    distinct?: HyperparameterArmScalarFieldEnum | HyperparameterArmScalarFieldEnum[]
  }

  /**
   * HyperparameterArm findFirstOrThrow
   */
  export type HyperparameterArmFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HyperparameterArmInclude<ExtArgs> | null
    /**
     * Filter, which HyperparameterArm to fetch.
     */
    where?: HyperparameterArmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HyperparameterArms to fetch.
     */
    orderBy?: HyperparameterArmOrderByWithRelationInput | HyperparameterArmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for HyperparameterArms.
     */
    cursor?: HyperparameterArmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HyperparameterArms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HyperparameterArms.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of HyperparameterArms.
     */
    distinct?: HyperparameterArmScalarFieldEnum | HyperparameterArmScalarFieldEnum[]
  }

  /**
   * HyperparameterArm findMany
   */
  export type HyperparameterArmFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HyperparameterArmInclude<ExtArgs> | null
    /**
     * Filter, which HyperparameterArms to fetch.
     */
    where?: HyperparameterArmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of HyperparameterArms to fetch.
     */
    orderBy?: HyperparameterArmOrderByWithRelationInput | HyperparameterArmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing HyperparameterArms.
     */
    cursor?: HyperparameterArmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` HyperparameterArms from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` HyperparameterArms.
     */
    skip?: number
    distinct?: HyperparameterArmScalarFieldEnum | HyperparameterArmScalarFieldEnum[]
  }

  /**
   * HyperparameterArm create
   */
  export type HyperparameterArmCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HyperparameterArmInclude<ExtArgs> | null
    /**
     * The data needed to create a HyperparameterArm.
     */
    data: XOR<HyperparameterArmCreateInput, HyperparameterArmUncheckedCreateInput>
  }

  /**
   * HyperparameterArm createMany
   */
  export type HyperparameterArmCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many HyperparameterArms.
     */
    data: HyperparameterArmCreateManyInput | HyperparameterArmCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HyperparameterArm createManyAndReturn
   */
  export type HyperparameterArmCreateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelectCreateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * The data used to create many HyperparameterArms.
     */
    data: HyperparameterArmCreateManyInput | HyperparameterArmCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * HyperparameterArm update
   */
  export type HyperparameterArmUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HyperparameterArmInclude<ExtArgs> | null
    /**
     * The data needed to update a HyperparameterArm.
     */
    data: XOR<HyperparameterArmUpdateInput, HyperparameterArmUncheckedUpdateInput>
    /**
     * Choose, which HyperparameterArm to update.
     */
    where: HyperparameterArmWhereUniqueInput
  }

  /**
   * HyperparameterArm updateMany
   */
  export type HyperparameterArmUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update HyperparameterArms.
     */
    data: XOR<HyperparameterArmUpdateManyMutationInput, HyperparameterArmUncheckedUpdateManyInput>
    /**
     * Filter which HyperparameterArms to update
     */
    where?: HyperparameterArmWhereInput
    /**
     * Limit how many HyperparameterArms to update.
     */
    limit?: number
  }

  /**
   * HyperparameterArm updateManyAndReturn
   */
  export type HyperparameterArmUpdateManyAndReturnArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelectUpdateManyAndReturn<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * The data used to update HyperparameterArms.
     */
    data: XOR<HyperparameterArmUpdateManyMutationInput, HyperparameterArmUncheckedUpdateManyInput>
    /**
     * Filter which HyperparameterArms to update
     */
    where?: HyperparameterArmWhereInput
    /**
     * Limit how many HyperparameterArms to update.
     */
    limit?: number
  }

  /**
   * HyperparameterArm upsert
   */
  export type HyperparameterArmUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HyperparameterArmInclude<ExtArgs> | null
    /**
     * The filter to search for the HyperparameterArm to update in case it exists.
     */
    where: HyperparameterArmWhereUniqueInput
    /**
     * In case the HyperparameterArm found by the `where` argument doesn't exist, create a new HyperparameterArm with this data.
     */
    create: XOR<HyperparameterArmCreateInput, HyperparameterArmUncheckedCreateInput>
    /**
     * In case the HyperparameterArm was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HyperparameterArmUpdateInput, HyperparameterArmUncheckedUpdateInput>
  }

  /**
   * HyperparameterArm delete
   */
  export type HyperparameterArmDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HyperparameterArmInclude<ExtArgs> | null
    /**
     * Filter which HyperparameterArm to delete.
     */
    where: HyperparameterArmWhereUniqueInput
  }

  /**
   * HyperparameterArm deleteMany
   */
  export type HyperparameterArmDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which HyperparameterArms to delete
     */
    where?: HyperparameterArmWhereInput
    /**
     * Limit how many HyperparameterArms to delete.
     */
    limit?: number
  }

  /**
   * HyperparameterArm.interacoes
   */
  export type HyperparameterArm$interacoesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the InteracaoIA
     */
    select?: InteracaoIASelect<ExtArgs> | null
    /**
     * Omit specific fields from the InteracaoIA
     */
    omit?: InteracaoIAOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: InteracaoIAInclude<ExtArgs> | null
    where?: InteracaoIAWhereInput
    orderBy?: InteracaoIAOrderByWithRelationInput | InteracaoIAOrderByWithRelationInput[]
    cursor?: InteracaoIAWhereUniqueInput
    take?: number
    skip?: number
    distinct?: InteracaoIAScalarFieldEnum | InteracaoIAScalarFieldEnum[]
  }

  /**
   * HyperparameterArm without action
   */
  export type HyperparameterArmDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the HyperparameterArm
     */
    select?: HyperparameterArmSelect<ExtArgs> | null
    /**
     * Omit specific fields from the HyperparameterArm
     */
    omit?: HyperparameterArmOmit<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: HyperparameterArmInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const SensorDataScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    temperatura: 'temperatura',
    nivel: 'nivel',
    rpm: 'rpm',
    corrente: 'corrente'
  };

  export type SensorDataScalarFieldEnum = (typeof SensorDataScalarFieldEnum)[keyof typeof SensorDataScalarFieldEnum]


  export const UsuariosScalarFieldEnum: {
    id: 'id',
    usuario: 'usuario',
    email: 'email',
    senha: 'senha'
  };

  export type UsuariosScalarFieldEnum = (typeof UsuariosScalarFieldEnum)[keyof typeof UsuariosScalarFieldEnum]


  export const InteracaoIAScalarFieldEnum: {
    id: 'id',
    perguntaUsuario: 'perguntaUsuario',
    queryMontada: 'queryMontada',
    respostaHumanizada: 'respostaHumanizada',
    feedbackUsuario: 'feedbackUsuario',
    criadoEm: 'criadoEm',
    atualizadoEm: 'atualizadoEm',
    hyperparameterArmId: 'hyperparameterArmId'
  };

  export type InteracaoIAScalarFieldEnum = (typeof InteracaoIAScalarFieldEnum)[keyof typeof InteracaoIAScalarFieldEnum]


  export const HyperparameterArmScalarFieldEnum: {
    id: 'id',
    modelName: 'modelName',
    version: 'version',
    temperature: 'temperature',
    topP: 'topP',
    topK: 'topK',
    maxOutputTokens: 'maxOutputTokens',
    responseMimeType: 'responseMimeType',
    successes: 'successes',
    failures: 'failures',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt'
  };

  export type HyperparameterArmScalarFieldEnum = (typeof HyperparameterArmScalarFieldEnum)[keyof typeof HyperparameterArmScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    
  /**
   * Deep Input Types
   */


  export type sensorDataWhereInput = {
    AND?: sensorDataWhereInput | sensorDataWhereInput[]
    OR?: sensorDataWhereInput[]
    NOT?: sensorDataWhereInput | sensorDataWhereInput[]
    id?: IntFilter<"sensorData"> | number
    createdAt?: DateTimeFilter<"sensorData"> | Date | string
    temperatura?: FloatFilter<"sensorData"> | number
    nivel?: FloatFilter<"sensorData"> | number
    rpm?: FloatFilter<"sensorData"> | number
    corrente?: FloatFilter<"sensorData"> | number
  }

  export type sensorDataOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    temperatura?: SortOrder
    nivel?: SortOrder
    rpm?: SortOrder
    corrente?: SortOrder
  }

  export type sensorDataWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: sensorDataWhereInput | sensorDataWhereInput[]
    OR?: sensorDataWhereInput[]
    NOT?: sensorDataWhereInput | sensorDataWhereInput[]
    createdAt?: DateTimeFilter<"sensorData"> | Date | string
    temperatura?: FloatFilter<"sensorData"> | number
    nivel?: FloatFilter<"sensorData"> | number
    rpm?: FloatFilter<"sensorData"> | number
    corrente?: FloatFilter<"sensorData"> | number
  }, "id">

  export type sensorDataOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    temperatura?: SortOrder
    nivel?: SortOrder
    rpm?: SortOrder
    corrente?: SortOrder
    _count?: sensorDataCountOrderByAggregateInput
    _avg?: sensorDataAvgOrderByAggregateInput
    _max?: sensorDataMaxOrderByAggregateInput
    _min?: sensorDataMinOrderByAggregateInput
    _sum?: sensorDataSumOrderByAggregateInput
  }

  export type sensorDataScalarWhereWithAggregatesInput = {
    AND?: sensorDataScalarWhereWithAggregatesInput | sensorDataScalarWhereWithAggregatesInput[]
    OR?: sensorDataScalarWhereWithAggregatesInput[]
    NOT?: sensorDataScalarWhereWithAggregatesInput | sensorDataScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"sensorData"> | number
    createdAt?: DateTimeWithAggregatesFilter<"sensorData"> | Date | string
    temperatura?: FloatWithAggregatesFilter<"sensorData"> | number
    nivel?: FloatWithAggregatesFilter<"sensorData"> | number
    rpm?: FloatWithAggregatesFilter<"sensorData"> | number
    corrente?: FloatWithAggregatesFilter<"sensorData"> | number
  }

  export type usuariosWhereInput = {
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    id?: IntFilter<"usuarios"> | number
    usuario?: StringFilter<"usuarios"> | string
    email?: StringFilter<"usuarios"> | string
    senha?: StringFilter<"usuarios"> | string
  }

  export type usuariosOrderByWithRelationInput = {
    id?: SortOrder
    usuario?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type usuariosWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    usuario?: string
    email?: string
    AND?: usuariosWhereInput | usuariosWhereInput[]
    OR?: usuariosWhereInput[]
    NOT?: usuariosWhereInput | usuariosWhereInput[]
    senha?: StringFilter<"usuarios"> | string
  }, "id" | "usuario" | "email">

  export type usuariosOrderByWithAggregationInput = {
    id?: SortOrder
    usuario?: SortOrder
    email?: SortOrder
    senha?: SortOrder
    _count?: usuariosCountOrderByAggregateInput
    _avg?: usuariosAvgOrderByAggregateInput
    _max?: usuariosMaxOrderByAggregateInput
    _min?: usuariosMinOrderByAggregateInput
    _sum?: usuariosSumOrderByAggregateInput
  }

  export type usuariosScalarWhereWithAggregatesInput = {
    AND?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    OR?: usuariosScalarWhereWithAggregatesInput[]
    NOT?: usuariosScalarWhereWithAggregatesInput | usuariosScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"usuarios"> | number
    usuario?: StringWithAggregatesFilter<"usuarios"> | string
    email?: StringWithAggregatesFilter<"usuarios"> | string
    senha?: StringWithAggregatesFilter<"usuarios"> | string
  }

  export type InteracaoIAWhereInput = {
    AND?: InteracaoIAWhereInput | InteracaoIAWhereInput[]
    OR?: InteracaoIAWhereInput[]
    NOT?: InteracaoIAWhereInput | InteracaoIAWhereInput[]
    id?: IntFilter<"InteracaoIA"> | number
    perguntaUsuario?: StringFilter<"InteracaoIA"> | string
    queryMontada?: StringFilter<"InteracaoIA"> | string
    respostaHumanizada?: StringFilter<"InteracaoIA"> | string
    feedbackUsuario?: IntNullableFilter<"InteracaoIA"> | number | null
    criadoEm?: DateTimeFilter<"InteracaoIA"> | Date | string
    atualizadoEm?: DateTimeFilter<"InteracaoIA"> | Date | string
    hyperparameterArmId?: StringFilter<"InteracaoIA"> | string
    hyperparameterArm?: XOR<HyperparameterArmScalarRelationFilter, HyperparameterArmWhereInput>
  }

  export type InteracaoIAOrderByWithRelationInput = {
    id?: SortOrder
    perguntaUsuario?: SortOrder
    queryMontada?: SortOrder
    respostaHumanizada?: SortOrder
    feedbackUsuario?: SortOrderInput | SortOrder
    criadoEm?: SortOrder
    atualizadoEm?: SortOrder
    hyperparameterArmId?: SortOrder
    hyperparameterArm?: HyperparameterArmOrderByWithRelationInput
  }

  export type InteracaoIAWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: InteracaoIAWhereInput | InteracaoIAWhereInput[]
    OR?: InteracaoIAWhereInput[]
    NOT?: InteracaoIAWhereInput | InteracaoIAWhereInput[]
    perguntaUsuario?: StringFilter<"InteracaoIA"> | string
    queryMontada?: StringFilter<"InteracaoIA"> | string
    respostaHumanizada?: StringFilter<"InteracaoIA"> | string
    feedbackUsuario?: IntNullableFilter<"InteracaoIA"> | number | null
    criadoEm?: DateTimeFilter<"InteracaoIA"> | Date | string
    atualizadoEm?: DateTimeFilter<"InteracaoIA"> | Date | string
    hyperparameterArmId?: StringFilter<"InteracaoIA"> | string
    hyperparameterArm?: XOR<HyperparameterArmScalarRelationFilter, HyperparameterArmWhereInput>
  }, "id">

  export type InteracaoIAOrderByWithAggregationInput = {
    id?: SortOrder
    perguntaUsuario?: SortOrder
    queryMontada?: SortOrder
    respostaHumanizada?: SortOrder
    feedbackUsuario?: SortOrderInput | SortOrder
    criadoEm?: SortOrder
    atualizadoEm?: SortOrder
    hyperparameterArmId?: SortOrder
    _count?: InteracaoIACountOrderByAggregateInput
    _avg?: InteracaoIAAvgOrderByAggregateInput
    _max?: InteracaoIAMaxOrderByAggregateInput
    _min?: InteracaoIAMinOrderByAggregateInput
    _sum?: InteracaoIASumOrderByAggregateInput
  }

  export type InteracaoIAScalarWhereWithAggregatesInput = {
    AND?: InteracaoIAScalarWhereWithAggregatesInput | InteracaoIAScalarWhereWithAggregatesInput[]
    OR?: InteracaoIAScalarWhereWithAggregatesInput[]
    NOT?: InteracaoIAScalarWhereWithAggregatesInput | InteracaoIAScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"InteracaoIA"> | number
    perguntaUsuario?: StringWithAggregatesFilter<"InteracaoIA"> | string
    queryMontada?: StringWithAggregatesFilter<"InteracaoIA"> | string
    respostaHumanizada?: StringWithAggregatesFilter<"InteracaoIA"> | string
    feedbackUsuario?: IntNullableWithAggregatesFilter<"InteracaoIA"> | number | null
    criadoEm?: DateTimeWithAggregatesFilter<"InteracaoIA"> | Date | string
    atualizadoEm?: DateTimeWithAggregatesFilter<"InteracaoIA"> | Date | string
    hyperparameterArmId?: StringWithAggregatesFilter<"InteracaoIA"> | string
  }

  export type HyperparameterArmWhereInput = {
    AND?: HyperparameterArmWhereInput | HyperparameterArmWhereInput[]
    OR?: HyperparameterArmWhereInput[]
    NOT?: HyperparameterArmWhereInput | HyperparameterArmWhereInput[]
    id?: StringFilter<"HyperparameterArm"> | string
    modelName?: StringNullableFilter<"HyperparameterArm"> | string | null
    version?: StringNullableFilter<"HyperparameterArm"> | string | null
    temperature?: FloatFilter<"HyperparameterArm"> | number
    topP?: FloatFilter<"HyperparameterArm"> | number
    topK?: IntFilter<"HyperparameterArm"> | number
    maxOutputTokens?: IntFilter<"HyperparameterArm"> | number
    responseMimeType?: StringFilter<"HyperparameterArm"> | string
    successes?: IntNullableFilter<"HyperparameterArm"> | number | null
    failures?: IntNullableFilter<"HyperparameterArm"> | number | null
    createdAt?: DateTimeFilter<"HyperparameterArm"> | Date | string
    updatedAt?: DateTimeFilter<"HyperparameterArm"> | Date | string
    interacoes?: InteracaoIAListRelationFilter
  }

  export type HyperparameterArmOrderByWithRelationInput = {
    id?: SortOrder
    modelName?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    temperature?: SortOrder
    topP?: SortOrder
    topK?: SortOrder
    maxOutputTokens?: SortOrder
    responseMimeType?: SortOrder
    successes?: SortOrderInput | SortOrder
    failures?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    interacoes?: InteracaoIAOrderByRelationAggregateInput
  }

  export type HyperparameterArmWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: HyperparameterArmWhereInput | HyperparameterArmWhereInput[]
    OR?: HyperparameterArmWhereInput[]
    NOT?: HyperparameterArmWhereInput | HyperparameterArmWhereInput[]
    modelName?: StringNullableFilter<"HyperparameterArm"> | string | null
    version?: StringNullableFilter<"HyperparameterArm"> | string | null
    temperature?: FloatFilter<"HyperparameterArm"> | number
    topP?: FloatFilter<"HyperparameterArm"> | number
    topK?: IntFilter<"HyperparameterArm"> | number
    maxOutputTokens?: IntFilter<"HyperparameterArm"> | number
    responseMimeType?: StringFilter<"HyperparameterArm"> | string
    successes?: IntNullableFilter<"HyperparameterArm"> | number | null
    failures?: IntNullableFilter<"HyperparameterArm"> | number | null
    createdAt?: DateTimeFilter<"HyperparameterArm"> | Date | string
    updatedAt?: DateTimeFilter<"HyperparameterArm"> | Date | string
    interacoes?: InteracaoIAListRelationFilter
  }, "id">

  export type HyperparameterArmOrderByWithAggregationInput = {
    id?: SortOrder
    modelName?: SortOrderInput | SortOrder
    version?: SortOrderInput | SortOrder
    temperature?: SortOrder
    topP?: SortOrder
    topK?: SortOrder
    maxOutputTokens?: SortOrder
    responseMimeType?: SortOrder
    successes?: SortOrderInput | SortOrder
    failures?: SortOrderInput | SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    _count?: HyperparameterArmCountOrderByAggregateInput
    _avg?: HyperparameterArmAvgOrderByAggregateInput
    _max?: HyperparameterArmMaxOrderByAggregateInput
    _min?: HyperparameterArmMinOrderByAggregateInput
    _sum?: HyperparameterArmSumOrderByAggregateInput
  }

  export type HyperparameterArmScalarWhereWithAggregatesInput = {
    AND?: HyperparameterArmScalarWhereWithAggregatesInput | HyperparameterArmScalarWhereWithAggregatesInput[]
    OR?: HyperparameterArmScalarWhereWithAggregatesInput[]
    NOT?: HyperparameterArmScalarWhereWithAggregatesInput | HyperparameterArmScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"HyperparameterArm"> | string
    modelName?: StringNullableWithAggregatesFilter<"HyperparameterArm"> | string | null
    version?: StringNullableWithAggregatesFilter<"HyperparameterArm"> | string | null
    temperature?: FloatWithAggregatesFilter<"HyperparameterArm"> | number
    topP?: FloatWithAggregatesFilter<"HyperparameterArm"> | number
    topK?: IntWithAggregatesFilter<"HyperparameterArm"> | number
    maxOutputTokens?: IntWithAggregatesFilter<"HyperparameterArm"> | number
    responseMimeType?: StringWithAggregatesFilter<"HyperparameterArm"> | string
    successes?: IntNullableWithAggregatesFilter<"HyperparameterArm"> | number | null
    failures?: IntNullableWithAggregatesFilter<"HyperparameterArm"> | number | null
    createdAt?: DateTimeWithAggregatesFilter<"HyperparameterArm"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"HyperparameterArm"> | Date | string
  }

  export type sensorDataCreateInput = {
    createdAt?: Date | string
    temperatura: number
    nivel: number
    rpm: number
    corrente: number
  }

  export type sensorDataUncheckedCreateInput = {
    id?: number
    createdAt?: Date | string
    temperatura: number
    nivel: number
    rpm: number
    corrente: number
  }

  export type sensorDataUpdateInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperatura?: FloatFieldUpdateOperationsInput | number
    nivel?: FloatFieldUpdateOperationsInput | number
    rpm?: FloatFieldUpdateOperationsInput | number
    corrente?: FloatFieldUpdateOperationsInput | number
  }

  export type sensorDataUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperatura?: FloatFieldUpdateOperationsInput | number
    nivel?: FloatFieldUpdateOperationsInput | number
    rpm?: FloatFieldUpdateOperationsInput | number
    corrente?: FloatFieldUpdateOperationsInput | number
  }

  export type sensorDataCreateManyInput = {
    id?: number
    createdAt?: Date | string
    temperatura: number
    nivel: number
    rpm: number
    corrente: number
  }

  export type sensorDataUpdateManyMutationInput = {
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperatura?: FloatFieldUpdateOperationsInput | number
    nivel?: FloatFieldUpdateOperationsInput | number
    rpm?: FloatFieldUpdateOperationsInput | number
    corrente?: FloatFieldUpdateOperationsInput | number
  }

  export type sensorDataUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    temperatura?: FloatFieldUpdateOperationsInput | number
    nivel?: FloatFieldUpdateOperationsInput | number
    rpm?: FloatFieldUpdateOperationsInput | number
    corrente?: FloatFieldUpdateOperationsInput | number
  }

  export type usuariosCreateInput = {
    usuario: string
    email: string
    senha: string
  }

  export type usuariosUncheckedCreateInput = {
    id?: number
    usuario: string
    email: string
    senha: string
  }

  export type usuariosUpdateInput = {
    usuario?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosCreateManyInput = {
    id?: number
    usuario: string
    email: string
    senha: string
  }

  export type usuariosUpdateManyMutationInput = {
    usuario?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type usuariosUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    usuario?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    senha?: StringFieldUpdateOperationsInput | string
  }

  export type InteracaoIACreateInput = {
    perguntaUsuario: string
    queryMontada: string
    respostaHumanizada: string
    feedbackUsuario?: number | null
    criadoEm?: Date | string
    atualizadoEm?: Date | string
    hyperparameterArm: HyperparameterArmCreateNestedOneWithoutInteracoesInput
  }

  export type InteracaoIAUncheckedCreateInput = {
    id?: number
    perguntaUsuario: string
    queryMontada: string
    respostaHumanizada: string
    feedbackUsuario?: number | null
    criadoEm?: Date | string
    atualizadoEm?: Date | string
    hyperparameterArmId: string
  }

  export type InteracaoIAUpdateInput = {
    perguntaUsuario?: StringFieldUpdateOperationsInput | string
    queryMontada?: StringFieldUpdateOperationsInput | string
    respostaHumanizada?: StringFieldUpdateOperationsInput | string
    feedbackUsuario?: NullableIntFieldUpdateOperationsInput | number | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    hyperparameterArm?: HyperparameterArmUpdateOneRequiredWithoutInteracoesNestedInput
  }

  export type InteracaoIAUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    perguntaUsuario?: StringFieldUpdateOperationsInput | string
    queryMontada?: StringFieldUpdateOperationsInput | string
    respostaHumanizada?: StringFieldUpdateOperationsInput | string
    feedbackUsuario?: NullableIntFieldUpdateOperationsInput | number | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    hyperparameterArmId?: StringFieldUpdateOperationsInput | string
  }

  export type InteracaoIACreateManyInput = {
    id?: number
    perguntaUsuario: string
    queryMontada: string
    respostaHumanizada: string
    feedbackUsuario?: number | null
    criadoEm?: Date | string
    atualizadoEm?: Date | string
    hyperparameterArmId: string
  }

  export type InteracaoIAUpdateManyMutationInput = {
    perguntaUsuario?: StringFieldUpdateOperationsInput | string
    queryMontada?: StringFieldUpdateOperationsInput | string
    respostaHumanizada?: StringFieldUpdateOperationsInput | string
    feedbackUsuario?: NullableIntFieldUpdateOperationsInput | number | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteracaoIAUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    perguntaUsuario?: StringFieldUpdateOperationsInput | string
    queryMontada?: StringFieldUpdateOperationsInput | string
    respostaHumanizada?: StringFieldUpdateOperationsInput | string
    feedbackUsuario?: NullableIntFieldUpdateOperationsInput | number | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    hyperparameterArmId?: StringFieldUpdateOperationsInput | string
  }

  export type HyperparameterArmCreateInput = {
    id?: string
    modelName?: string | null
    version?: string | null
    temperature: number
    topP: number
    topK: number
    maxOutputTokens: number
    responseMimeType: string
    successes?: number | null
    failures?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    interacoes?: InteracaoIACreateNestedManyWithoutHyperparameterArmInput
  }

  export type HyperparameterArmUncheckedCreateInput = {
    id?: string
    modelName?: string | null
    version?: string | null
    temperature: number
    topP: number
    topK: number
    maxOutputTokens: number
    responseMimeType: string
    successes?: number | null
    failures?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
    interacoes?: InteracaoIAUncheckedCreateNestedManyWithoutHyperparameterArmInput
  }

  export type HyperparameterArmUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    modelName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: FloatFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    topK?: IntFieldUpdateOperationsInput | number
    maxOutputTokens?: IntFieldUpdateOperationsInput | number
    responseMimeType?: StringFieldUpdateOperationsInput | string
    successes?: NullableIntFieldUpdateOperationsInput | number | null
    failures?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interacoes?: InteracaoIAUpdateManyWithoutHyperparameterArmNestedInput
  }

  export type HyperparameterArmUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    modelName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: FloatFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    topK?: IntFieldUpdateOperationsInput | number
    maxOutputTokens?: IntFieldUpdateOperationsInput | number
    responseMimeType?: StringFieldUpdateOperationsInput | string
    successes?: NullableIntFieldUpdateOperationsInput | number | null
    failures?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    interacoes?: InteracaoIAUncheckedUpdateManyWithoutHyperparameterArmNestedInput
  }

  export type HyperparameterArmCreateManyInput = {
    id?: string
    modelName?: string | null
    version?: string | null
    temperature: number
    topP: number
    topK: number
    maxOutputTokens: number
    responseMimeType: string
    successes?: number | null
    failures?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HyperparameterArmUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    modelName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: FloatFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    topK?: IntFieldUpdateOperationsInput | number
    maxOutputTokens?: IntFieldUpdateOperationsInput | number
    responseMimeType?: StringFieldUpdateOperationsInput | string
    successes?: NullableIntFieldUpdateOperationsInput | number | null
    failures?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HyperparameterArmUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    modelName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: FloatFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    topK?: IntFieldUpdateOperationsInput | number
    maxOutputTokens?: IntFieldUpdateOperationsInput | number
    responseMimeType?: StringFieldUpdateOperationsInput | string
    successes?: NullableIntFieldUpdateOperationsInput | number | null
    failures?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type sensorDataCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    temperatura?: SortOrder
    nivel?: SortOrder
    rpm?: SortOrder
    corrente?: SortOrder
  }

  export type sensorDataAvgOrderByAggregateInput = {
    id?: SortOrder
    temperatura?: SortOrder
    nivel?: SortOrder
    rpm?: SortOrder
    corrente?: SortOrder
  }

  export type sensorDataMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    temperatura?: SortOrder
    nivel?: SortOrder
    rpm?: SortOrder
    corrente?: SortOrder
  }

  export type sensorDataMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    temperatura?: SortOrder
    nivel?: SortOrder
    rpm?: SortOrder
    corrente?: SortOrder
  }

  export type sensorDataSumOrderByAggregateInput = {
    id?: SortOrder
    temperatura?: SortOrder
    nivel?: SortOrder
    rpm?: SortOrder
    corrente?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type usuariosCountOrderByAggregateInput = {
    id?: SortOrder
    usuario?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type usuariosAvgOrderByAggregateInput = {
    id?: SortOrder
  }

  export type usuariosMaxOrderByAggregateInput = {
    id?: SortOrder
    usuario?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type usuariosMinOrderByAggregateInput = {
    id?: SortOrder
    usuario?: SortOrder
    email?: SortOrder
    senha?: SortOrder
  }

  export type usuariosSumOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type HyperparameterArmScalarRelationFilter = {
    is?: HyperparameterArmWhereInput
    isNot?: HyperparameterArmWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type InteracaoIACountOrderByAggregateInput = {
    id?: SortOrder
    perguntaUsuario?: SortOrder
    queryMontada?: SortOrder
    respostaHumanizada?: SortOrder
    feedbackUsuario?: SortOrder
    criadoEm?: SortOrder
    atualizadoEm?: SortOrder
    hyperparameterArmId?: SortOrder
  }

  export type InteracaoIAAvgOrderByAggregateInput = {
    id?: SortOrder
    feedbackUsuario?: SortOrder
  }

  export type InteracaoIAMaxOrderByAggregateInput = {
    id?: SortOrder
    perguntaUsuario?: SortOrder
    queryMontada?: SortOrder
    respostaHumanizada?: SortOrder
    feedbackUsuario?: SortOrder
    criadoEm?: SortOrder
    atualizadoEm?: SortOrder
    hyperparameterArmId?: SortOrder
  }

  export type InteracaoIAMinOrderByAggregateInput = {
    id?: SortOrder
    perguntaUsuario?: SortOrder
    queryMontada?: SortOrder
    respostaHumanizada?: SortOrder
    feedbackUsuario?: SortOrder
    criadoEm?: SortOrder
    atualizadoEm?: SortOrder
    hyperparameterArmId?: SortOrder
  }

  export type InteracaoIASumOrderByAggregateInput = {
    id?: SortOrder
    feedbackUsuario?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type InteracaoIAListRelationFilter = {
    every?: InteracaoIAWhereInput
    some?: InteracaoIAWhereInput
    none?: InteracaoIAWhereInput
  }

  export type InteracaoIAOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HyperparameterArmCountOrderByAggregateInput = {
    id?: SortOrder
    modelName?: SortOrder
    version?: SortOrder
    temperature?: SortOrder
    topP?: SortOrder
    topK?: SortOrder
    maxOutputTokens?: SortOrder
    responseMimeType?: SortOrder
    successes?: SortOrder
    failures?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HyperparameterArmAvgOrderByAggregateInput = {
    temperature?: SortOrder
    topP?: SortOrder
    topK?: SortOrder
    maxOutputTokens?: SortOrder
    successes?: SortOrder
    failures?: SortOrder
  }

  export type HyperparameterArmMaxOrderByAggregateInput = {
    id?: SortOrder
    modelName?: SortOrder
    version?: SortOrder
    temperature?: SortOrder
    topP?: SortOrder
    topK?: SortOrder
    maxOutputTokens?: SortOrder
    responseMimeType?: SortOrder
    successes?: SortOrder
    failures?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HyperparameterArmMinOrderByAggregateInput = {
    id?: SortOrder
    modelName?: SortOrder
    version?: SortOrder
    temperature?: SortOrder
    topP?: SortOrder
    topK?: SortOrder
    maxOutputTokens?: SortOrder
    responseMimeType?: SortOrder
    successes?: SortOrder
    failures?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
  }

  export type HyperparameterArmSumOrderByAggregateInput = {
    temperature?: SortOrder
    topP?: SortOrder
    topK?: SortOrder
    maxOutputTokens?: SortOrder
    successes?: SortOrder
    failures?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type HyperparameterArmCreateNestedOneWithoutInteracoesInput = {
    create?: XOR<HyperparameterArmCreateWithoutInteracoesInput, HyperparameterArmUncheckedCreateWithoutInteracoesInput>
    connectOrCreate?: HyperparameterArmCreateOrConnectWithoutInteracoesInput
    connect?: HyperparameterArmWhereUniqueInput
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type HyperparameterArmUpdateOneRequiredWithoutInteracoesNestedInput = {
    create?: XOR<HyperparameterArmCreateWithoutInteracoesInput, HyperparameterArmUncheckedCreateWithoutInteracoesInput>
    connectOrCreate?: HyperparameterArmCreateOrConnectWithoutInteracoesInput
    upsert?: HyperparameterArmUpsertWithoutInteracoesInput
    connect?: HyperparameterArmWhereUniqueInput
    update?: XOR<XOR<HyperparameterArmUpdateToOneWithWhereWithoutInteracoesInput, HyperparameterArmUpdateWithoutInteracoesInput>, HyperparameterArmUncheckedUpdateWithoutInteracoesInput>
  }

  export type InteracaoIACreateNestedManyWithoutHyperparameterArmInput = {
    create?: XOR<InteracaoIACreateWithoutHyperparameterArmInput, InteracaoIAUncheckedCreateWithoutHyperparameterArmInput> | InteracaoIACreateWithoutHyperparameterArmInput[] | InteracaoIAUncheckedCreateWithoutHyperparameterArmInput[]
    connectOrCreate?: InteracaoIACreateOrConnectWithoutHyperparameterArmInput | InteracaoIACreateOrConnectWithoutHyperparameterArmInput[]
    createMany?: InteracaoIACreateManyHyperparameterArmInputEnvelope
    connect?: InteracaoIAWhereUniqueInput | InteracaoIAWhereUniqueInput[]
  }

  export type InteracaoIAUncheckedCreateNestedManyWithoutHyperparameterArmInput = {
    create?: XOR<InteracaoIACreateWithoutHyperparameterArmInput, InteracaoIAUncheckedCreateWithoutHyperparameterArmInput> | InteracaoIACreateWithoutHyperparameterArmInput[] | InteracaoIAUncheckedCreateWithoutHyperparameterArmInput[]
    connectOrCreate?: InteracaoIACreateOrConnectWithoutHyperparameterArmInput | InteracaoIACreateOrConnectWithoutHyperparameterArmInput[]
    createMany?: InteracaoIACreateManyHyperparameterArmInputEnvelope
    connect?: InteracaoIAWhereUniqueInput | InteracaoIAWhereUniqueInput[]
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type InteracaoIAUpdateManyWithoutHyperparameterArmNestedInput = {
    create?: XOR<InteracaoIACreateWithoutHyperparameterArmInput, InteracaoIAUncheckedCreateWithoutHyperparameterArmInput> | InteracaoIACreateWithoutHyperparameterArmInput[] | InteracaoIAUncheckedCreateWithoutHyperparameterArmInput[]
    connectOrCreate?: InteracaoIACreateOrConnectWithoutHyperparameterArmInput | InteracaoIACreateOrConnectWithoutHyperparameterArmInput[]
    upsert?: InteracaoIAUpsertWithWhereUniqueWithoutHyperparameterArmInput | InteracaoIAUpsertWithWhereUniqueWithoutHyperparameterArmInput[]
    createMany?: InteracaoIACreateManyHyperparameterArmInputEnvelope
    set?: InteracaoIAWhereUniqueInput | InteracaoIAWhereUniqueInput[]
    disconnect?: InteracaoIAWhereUniqueInput | InteracaoIAWhereUniqueInput[]
    delete?: InteracaoIAWhereUniqueInput | InteracaoIAWhereUniqueInput[]
    connect?: InteracaoIAWhereUniqueInput | InteracaoIAWhereUniqueInput[]
    update?: InteracaoIAUpdateWithWhereUniqueWithoutHyperparameterArmInput | InteracaoIAUpdateWithWhereUniqueWithoutHyperparameterArmInput[]
    updateMany?: InteracaoIAUpdateManyWithWhereWithoutHyperparameterArmInput | InteracaoIAUpdateManyWithWhereWithoutHyperparameterArmInput[]
    deleteMany?: InteracaoIAScalarWhereInput | InteracaoIAScalarWhereInput[]
  }

  export type InteracaoIAUncheckedUpdateManyWithoutHyperparameterArmNestedInput = {
    create?: XOR<InteracaoIACreateWithoutHyperparameterArmInput, InteracaoIAUncheckedCreateWithoutHyperparameterArmInput> | InteracaoIACreateWithoutHyperparameterArmInput[] | InteracaoIAUncheckedCreateWithoutHyperparameterArmInput[]
    connectOrCreate?: InteracaoIACreateOrConnectWithoutHyperparameterArmInput | InteracaoIACreateOrConnectWithoutHyperparameterArmInput[]
    upsert?: InteracaoIAUpsertWithWhereUniqueWithoutHyperparameterArmInput | InteracaoIAUpsertWithWhereUniqueWithoutHyperparameterArmInput[]
    createMany?: InteracaoIACreateManyHyperparameterArmInputEnvelope
    set?: InteracaoIAWhereUniqueInput | InteracaoIAWhereUniqueInput[]
    disconnect?: InteracaoIAWhereUniqueInput | InteracaoIAWhereUniqueInput[]
    delete?: InteracaoIAWhereUniqueInput | InteracaoIAWhereUniqueInput[]
    connect?: InteracaoIAWhereUniqueInput | InteracaoIAWhereUniqueInput[]
    update?: InteracaoIAUpdateWithWhereUniqueWithoutHyperparameterArmInput | InteracaoIAUpdateWithWhereUniqueWithoutHyperparameterArmInput[]
    updateMany?: InteracaoIAUpdateManyWithWhereWithoutHyperparameterArmInput | InteracaoIAUpdateManyWithWhereWithoutHyperparameterArmInput[]
    deleteMany?: InteracaoIAScalarWhereInput | InteracaoIAScalarWhereInput[]
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type HyperparameterArmCreateWithoutInteracoesInput = {
    id?: string
    modelName?: string | null
    version?: string | null
    temperature: number
    topP: number
    topK: number
    maxOutputTokens: number
    responseMimeType: string
    successes?: number | null
    failures?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HyperparameterArmUncheckedCreateWithoutInteracoesInput = {
    id?: string
    modelName?: string | null
    version?: string | null
    temperature: number
    topP: number
    topK: number
    maxOutputTokens: number
    responseMimeType: string
    successes?: number | null
    failures?: number | null
    createdAt?: Date | string
    updatedAt?: Date | string
  }

  export type HyperparameterArmCreateOrConnectWithoutInteracoesInput = {
    where: HyperparameterArmWhereUniqueInput
    create: XOR<HyperparameterArmCreateWithoutInteracoesInput, HyperparameterArmUncheckedCreateWithoutInteracoesInput>
  }

  export type HyperparameterArmUpsertWithoutInteracoesInput = {
    update: XOR<HyperparameterArmUpdateWithoutInteracoesInput, HyperparameterArmUncheckedUpdateWithoutInteracoesInput>
    create: XOR<HyperparameterArmCreateWithoutInteracoesInput, HyperparameterArmUncheckedCreateWithoutInteracoesInput>
    where?: HyperparameterArmWhereInput
  }

  export type HyperparameterArmUpdateToOneWithWhereWithoutInteracoesInput = {
    where?: HyperparameterArmWhereInput
    data: XOR<HyperparameterArmUpdateWithoutInteracoesInput, HyperparameterArmUncheckedUpdateWithoutInteracoesInput>
  }

  export type HyperparameterArmUpdateWithoutInteracoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    modelName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: FloatFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    topK?: IntFieldUpdateOperationsInput | number
    maxOutputTokens?: IntFieldUpdateOperationsInput | number
    responseMimeType?: StringFieldUpdateOperationsInput | string
    successes?: NullableIntFieldUpdateOperationsInput | number | null
    failures?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HyperparameterArmUncheckedUpdateWithoutInteracoesInput = {
    id?: StringFieldUpdateOperationsInput | string
    modelName?: NullableStringFieldUpdateOperationsInput | string | null
    version?: NullableStringFieldUpdateOperationsInput | string | null
    temperature?: FloatFieldUpdateOperationsInput | number
    topP?: FloatFieldUpdateOperationsInput | number
    topK?: IntFieldUpdateOperationsInput | number
    maxOutputTokens?: IntFieldUpdateOperationsInput | number
    responseMimeType?: StringFieldUpdateOperationsInput | string
    successes?: NullableIntFieldUpdateOperationsInput | number | null
    failures?: NullableIntFieldUpdateOperationsInput | number | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteracaoIACreateWithoutHyperparameterArmInput = {
    perguntaUsuario: string
    queryMontada: string
    respostaHumanizada: string
    feedbackUsuario?: number | null
    criadoEm?: Date | string
    atualizadoEm?: Date | string
  }

  export type InteracaoIAUncheckedCreateWithoutHyperparameterArmInput = {
    id?: number
    perguntaUsuario: string
    queryMontada: string
    respostaHumanizada: string
    feedbackUsuario?: number | null
    criadoEm?: Date | string
    atualizadoEm?: Date | string
  }

  export type InteracaoIACreateOrConnectWithoutHyperparameterArmInput = {
    where: InteracaoIAWhereUniqueInput
    create: XOR<InteracaoIACreateWithoutHyperparameterArmInput, InteracaoIAUncheckedCreateWithoutHyperparameterArmInput>
  }

  export type InteracaoIACreateManyHyperparameterArmInputEnvelope = {
    data: InteracaoIACreateManyHyperparameterArmInput | InteracaoIACreateManyHyperparameterArmInput[]
    skipDuplicates?: boolean
  }

  export type InteracaoIAUpsertWithWhereUniqueWithoutHyperparameterArmInput = {
    where: InteracaoIAWhereUniqueInput
    update: XOR<InteracaoIAUpdateWithoutHyperparameterArmInput, InteracaoIAUncheckedUpdateWithoutHyperparameterArmInput>
    create: XOR<InteracaoIACreateWithoutHyperparameterArmInput, InteracaoIAUncheckedCreateWithoutHyperparameterArmInput>
  }

  export type InteracaoIAUpdateWithWhereUniqueWithoutHyperparameterArmInput = {
    where: InteracaoIAWhereUniqueInput
    data: XOR<InteracaoIAUpdateWithoutHyperparameterArmInput, InteracaoIAUncheckedUpdateWithoutHyperparameterArmInput>
  }

  export type InteracaoIAUpdateManyWithWhereWithoutHyperparameterArmInput = {
    where: InteracaoIAScalarWhereInput
    data: XOR<InteracaoIAUpdateManyMutationInput, InteracaoIAUncheckedUpdateManyWithoutHyperparameterArmInput>
  }

  export type InteracaoIAScalarWhereInput = {
    AND?: InteracaoIAScalarWhereInput | InteracaoIAScalarWhereInput[]
    OR?: InteracaoIAScalarWhereInput[]
    NOT?: InteracaoIAScalarWhereInput | InteracaoIAScalarWhereInput[]
    id?: IntFilter<"InteracaoIA"> | number
    perguntaUsuario?: StringFilter<"InteracaoIA"> | string
    queryMontada?: StringFilter<"InteracaoIA"> | string
    respostaHumanizada?: StringFilter<"InteracaoIA"> | string
    feedbackUsuario?: IntNullableFilter<"InteracaoIA"> | number | null
    criadoEm?: DateTimeFilter<"InteracaoIA"> | Date | string
    atualizadoEm?: DateTimeFilter<"InteracaoIA"> | Date | string
    hyperparameterArmId?: StringFilter<"InteracaoIA"> | string
  }

  export type InteracaoIACreateManyHyperparameterArmInput = {
    id?: number
    perguntaUsuario: string
    queryMontada: string
    respostaHumanizada: string
    feedbackUsuario?: number | null
    criadoEm?: Date | string
    atualizadoEm?: Date | string
  }

  export type InteracaoIAUpdateWithoutHyperparameterArmInput = {
    perguntaUsuario?: StringFieldUpdateOperationsInput | string
    queryMontada?: StringFieldUpdateOperationsInput | string
    respostaHumanizada?: StringFieldUpdateOperationsInput | string
    feedbackUsuario?: NullableIntFieldUpdateOperationsInput | number | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteracaoIAUncheckedUpdateWithoutHyperparameterArmInput = {
    id?: IntFieldUpdateOperationsInput | number
    perguntaUsuario?: StringFieldUpdateOperationsInput | string
    queryMontada?: StringFieldUpdateOperationsInput | string
    respostaHumanizada?: StringFieldUpdateOperationsInput | string
    feedbackUsuario?: NullableIntFieldUpdateOperationsInput | number | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type InteracaoIAUncheckedUpdateManyWithoutHyperparameterArmInput = {
    id?: IntFieldUpdateOperationsInput | number
    perguntaUsuario?: StringFieldUpdateOperationsInput | string
    queryMontada?: StringFieldUpdateOperationsInput | string
    respostaHumanizada?: StringFieldUpdateOperationsInput | string
    feedbackUsuario?: NullableIntFieldUpdateOperationsInput | number | null
    criadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
    atualizadoEm?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}