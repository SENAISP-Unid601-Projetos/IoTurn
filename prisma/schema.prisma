generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://usuario:senha123@172.28.96.1:5432/ioturn"
}

model InteracaoIA {
  id                  Int               @id @default(autoincrement())
  perguntaUsuario     String
  queryMontada        String
  respostaHumanizada  String
  feedbackUsuario     Int?
  criadoEm            DateTime          @default(now())
  atualizadoEm        DateTime          @updatedAt
  hyperparameterArmId String
  hyperparameterArm   HyperparameterArm @relation(fields: [hyperparameterArmId], references: [id])
}

model HyperparameterArm {
  id               String        @id @default(uuid())
  modelName        String?
  version          String?
  temperature      Float
  topP             Float
  topK             Int
  maxOutputTokens  Int
  responseMimeType String
  successes        Int?          @default(0)
  failures         Int?          @default(0)
  createdAt        DateTime      @default(now())
  updatedAt        DateTime      @updatedAt
  interacoes       InteracaoIA[]
}

/// Representa a empresa cliente que contrata o serviço IoTurn.
model Client {
  id           Int       @id @default(autoincrement())
  companyName  String
  cnpj         String    @unique
  phone        String?
  address      String?
  email        String    @unique
  password     String
  contractDate DateTime  @default(now())
  status       Status    @default(ACTIVE)
  machines     Machine[]
  users        User[]

  @@map("clients")
}

/// Usuários que podem acessar a plataforma, associados a um cliente.
model User {
  id                     Int                     @id @default(autoincrement())
  name                   String
  email                  String                  @unique
  password               String
  userType               UserType
  status                 Status                  @default(ACTIVE)
  clientId               Int
  createdAt              DateTime                @default(now())
  currentReadings        CurrentReading[]        @relation("CurrentReadings")
  responsibleMachines    Machine[]               @relation("ResponsibleForMachines")
  oilLevelReadings       OilLevelReading[]       @relation("OilLevelReadings")
  oilTemperatureReadings OilTemperatureReading[] @relation("OilTemperatureReadings")
  rpmReadings            RpmReading[]            @relation("RpmReadings")
  client                 Client                  @relation(fields: [clientId], references: [id])

  @@map("users")
}

/// Representa uma máquina industrial monitorada.
model Machine {
  id                     Int                     @id @default(autoincrement())
  name                   String
  model                  String?
  manufacturer           String?
  serialNumber           String                  @unique
  status                 Status                  @default(ACTIVE)
  clientId               Int
  responsibleUserId      Int
  deviceId               Int?                     @unique
  UnifiedMachineState    UnifiedMachineState[]
  currentReadings        CurrentReading[]        @relation("CurrentReadings")
  client                 Client                  @relation(fields: [clientId], references: [id])
  device                 Device?                  @relation(fields: [deviceId], references: [id])
  responsibleUser        User                    @relation("ResponsibleForMachines", fields: [responsibleUserId], references: [id])
  oilLevelReadings       OilLevelReading[]       @relation("OilLevelReadings")
  oilTemperatureReadings OilTemperatureReading[] @relation("OilTemperatureReadings")
  rpmReadings            RpmReading[]            @relation("RpmReadings")

  @@map("machines")
}

model UnifiedMachineState {
  id                      String   @id @default(cuid())
  timestamp               DateTime @db.Timestamptz(3)
  machineId               Int
  current                 Float?
  rpm                     Int?
  oilTemperature          Float?
  oilLevel                Float?
  clusterPredict          Int?
  clusterStrength         Float?
  currentIsMissing        Boolean  @default(false)
  rpmIsMissing            Boolean  @default(false)
  oilTemperatureIsMissing Boolean  @default(false)
  oilLevelIsMissing       Boolean  @default(false)
  machine                 Machine  @relation(fields: [machineId], references: [id])

  @@index([machineId, timestamp])
}

model Device {
  id            Int          @id @default(autoincrement())
  nodeId        String       @unique
  description   String?
  status        DeviceStatus @default(PROVISIONING)
  lastHeartbeat DateTime     @updatedAt
  gatewayId     Int?
  gateway       Gateway?     @relation(fields: [gatewayId], references: [id])
  machine       Machine?

  @@map("devices")
}

/// Representa o hardware físico do Gateway (ESP32 com Wi-Fi).
model Gateway {
  id             Int          @id @default(autoincrement())
  gatewayId      String       @unique
  description    String?
  status         DeviceStatus @default(OFFLINE)
  lastHeartbeat  DateTime     @updatedAt
  responsibleFor Device[]

  @@map("gateways")
}

/// Armazena as leituras dos sensores de uma máquina em um ponto no tempo.
model RpmReading {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  rpm       Int
  machineId Int
  userId    Int?
  machine   Machine  @relation("RpmReadings", fields: [machineId], references: [id])
  user      User?    @relation("RpmReadings", fields: [userId], references: [id])

  @@map("rpm_readings")
}

model OilTemperatureReading {
  id          Int      @id @default(autoincrement())
  timestamp   DateTime @default(now())
  temperature Float
  machineId   Int
  userId      Int?
  machine     Machine  @relation("OilTemperatureReadings", fields: [machineId], references: [id])
  user        User?    @relation("OilTemperatureReadings", fields: [userId], references: [id])

  @@map("oil_temperature_readings")
}

model OilLevelReading {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  level     Float
  machineId Int
  userId    Int?
  machine   Machine  @relation("OilLevelReadings", fields: [machineId], references: [id])
  user      User?    @relation("OilLevelReadings", fields: [userId], references: [id])

  @@map("oil_level_readings")
}

model CurrentReading {
  id        Int      @id @default(autoincrement())
  timestamp DateTime @default(now())
  current   Float
  machineId Int
  userId    Int?
  machine   Machine  @relation("CurrentReadings", fields: [machineId], references: [id])
  user      User?    @relation("CurrentReadings", fields: [userId], references: [id])

  @@map("current_readings")
}

/// Status geral para clientes, usuários e máquinas.
enum Status {
  ACTIVE
  SUSPENDED
  CANCELED
}

/// Tipos de perfil de usuário dentro da plataforma.
enum UserType {
  ADMIN
  TECHNICIAN
  VIEWER
}

/// Enum para o status do dispositivo
enum DeviceStatus {
  ONLINE
  OFFLINE
  PROVISIONING
  ERROR
}
